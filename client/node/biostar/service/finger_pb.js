/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var err_pb = require('./err_pb.js');
goog.exportSymbol('proto.finger.FastMode', null, global);
goog.exportSymbol('proto.finger.FingerConfig', null, global);
goog.exportSymbol('proto.finger.FingerData', null, global);
goog.exportSymbol('proto.finger.GetConfigRequest', null, global);
goog.exportSymbol('proto.finger.GetConfigResponse', null, global);
goog.exportSymbol('proto.finger.GetImageRequest', null, global);
goog.exportSymbol('proto.finger.GetImageResponse', null, global);
goog.exportSymbol('proto.finger.LFDLevel', null, global);
goog.exportSymbol('proto.finger.ScanRequest', null, global);
goog.exportSymbol('proto.finger.ScanResponse', null, global);
goog.exportSymbol('proto.finger.SecurityLevel', null, global);
goog.exportSymbol('proto.finger.Sensitivity', null, global);
goog.exportSymbol('proto.finger.SensorMode', null, global);
goog.exportSymbol('proto.finger.SetConfigMultiRequest', null, global);
goog.exportSymbol('proto.finger.SetConfigMultiResponse', null, global);
goog.exportSymbol('proto.finger.SetConfigRequest', null, global);
goog.exportSymbol('proto.finger.SetConfigResponse', null, global);
goog.exportSymbol('proto.finger.TemplateFormat', null, global);
goog.exportSymbol('proto.finger.VerifyRequest', null, global);
goog.exportSymbol('proto.finger.VerifyResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.FingerData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.finger.FingerData.repeatedFields_, null);
};
goog.inherits(proto.finger.FingerData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.FingerData.displayName = 'proto.finger.FingerData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.finger.FingerData.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.FingerData.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.FingerData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.FingerData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.FingerData.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    flag: jspb.Message.getFieldWithDefault(msg, 2, 0),
    templatesList: msg.getTemplatesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.FingerData}
 */
proto.finger.FingerData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.FingerData;
  return proto.finger.FingerData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.FingerData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.FingerData}
 */
proto.finger.FingerData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlag(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTemplates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.FingerData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.FingerData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.FingerData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.FingerData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFlag();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTemplatesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.finger.FingerData.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.finger.FingerData.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 flag = 2;
 * @return {number}
 */
proto.finger.FingerData.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.finger.FingerData.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated bytes templates = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.finger.FingerData.prototype.getTemplatesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes templates = 3;
 * This is a type-conversion wrapper around `getTemplatesList()`
 * @return {!Array.<string>}
 */
proto.finger.FingerData.prototype.getTemplatesList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getTemplatesList()));
};


/**
 * repeated bytes templates = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTemplatesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.finger.FingerData.prototype.getTemplatesList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTemplatesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.finger.FingerData.prototype.setTemplatesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.finger.FingerData.prototype.addTemplates = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.finger.FingerData.prototype.clearTemplatesList = function() {
  this.setTemplatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.ScanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finger.ScanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.ScanRequest.displayName = 'proto.finger.ScanRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.ScanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.ScanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.ScanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.ScanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    templateformat: jspb.Message.getFieldWithDefault(msg, 2, 0),
    qualitythreshold: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.ScanRequest}
 */
proto.finger.ScanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.ScanRequest;
  return proto.finger.ScanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.ScanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.ScanRequest}
 */
proto.finger.ScanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {!proto.finger.TemplateFormat} */ (reader.readEnum());
      msg.setTemplateformat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQualitythreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.ScanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.ScanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.ScanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.ScanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTemplateformat();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getQualitythreshold();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.finger.ScanRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.finger.ScanRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional TemplateFormat templateFormat = 2;
 * @return {!proto.finger.TemplateFormat}
 */
proto.finger.ScanRequest.prototype.getTemplateformat = function() {
  return /** @type {!proto.finger.TemplateFormat} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.finger.TemplateFormat} value */
proto.finger.ScanRequest.prototype.setTemplateformat = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 qualityThreshold = 3;
 * @return {number}
 */
proto.finger.ScanRequest.prototype.getQualitythreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.finger.ScanRequest.prototype.setQualitythreshold = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.ScanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finger.ScanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.ScanResponse.displayName = 'proto.finger.ScanResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.ScanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.ScanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.ScanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.ScanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    templatedata: msg.getTemplatedata_asB64(),
    qualityscore: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.ScanResponse}
 */
proto.finger.ScanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.ScanResponse;
  return proto.finger.ScanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.ScanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.ScanResponse}
 */
proto.finger.ScanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTemplatedata(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQualityscore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.ScanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.ScanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.ScanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.ScanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplatedata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getQualityscore();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes templateData = 1;
 * @return {!(string|Uint8Array)}
 */
proto.finger.ScanResponse.prototype.getTemplatedata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes templateData = 1;
 * This is a type-conversion wrapper around `getTemplatedata()`
 * @return {string}
 */
proto.finger.ScanResponse.prototype.getTemplatedata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTemplatedata()));
};


/**
 * optional bytes templateData = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTemplatedata()`
 * @return {!Uint8Array}
 */
proto.finger.ScanResponse.prototype.getTemplatedata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTemplatedata()));
};


/** @param {!(string|Uint8Array)} value */
proto.finger.ScanResponse.prototype.setTemplatedata = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 qualityScore = 2;
 * @return {number}
 */
proto.finger.ScanResponse.prototype.getQualityscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.finger.ScanResponse.prototype.setQualityscore = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.GetImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finger.GetImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.GetImageRequest.displayName = 'proto.finger.GetImageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.GetImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.GetImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.GetImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.GetImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.GetImageRequest}
 */
proto.finger.GetImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.GetImageRequest;
  return proto.finger.GetImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.GetImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.GetImageRequest}
 */
proto.finger.GetImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.GetImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.GetImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.GetImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.GetImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.finger.GetImageRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.finger.GetImageRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.GetImageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finger.GetImageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.GetImageResponse.displayName = 'proto.finger.GetImageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.GetImageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.GetImageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.GetImageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.GetImageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bmpimage: msg.getBmpimage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.GetImageResponse}
 */
proto.finger.GetImageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.GetImageResponse;
  return proto.finger.GetImageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.GetImageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.GetImageResponse}
 */
proto.finger.GetImageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBmpimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.GetImageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.GetImageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.GetImageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.GetImageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBmpimage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes BMPImage = 1;
 * @return {!(string|Uint8Array)}
 */
proto.finger.GetImageResponse.prototype.getBmpimage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes BMPImage = 1;
 * This is a type-conversion wrapper around `getBmpimage()`
 * @return {string}
 */
proto.finger.GetImageResponse.prototype.getBmpimage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBmpimage()));
};


/**
 * optional bytes BMPImage = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBmpimage()`
 * @return {!Uint8Array}
 */
proto.finger.GetImageResponse.prototype.getBmpimage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBmpimage()));
};


/** @param {!(string|Uint8Array)} value */
proto.finger.GetImageResponse.prototype.setBmpimage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.VerifyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finger.VerifyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.VerifyRequest.displayName = 'proto.finger.VerifyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.VerifyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.VerifyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.VerifyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.VerifyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fingerdata: (f = msg.getFingerdata()) && proto.finger.FingerData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.VerifyRequest}
 */
proto.finger.VerifyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.VerifyRequest;
  return proto.finger.VerifyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.VerifyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.VerifyRequest}
 */
proto.finger.VerifyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = new proto.finger.FingerData;
      reader.readMessage(value,proto.finger.FingerData.deserializeBinaryFromReader);
      msg.setFingerdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.VerifyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.VerifyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.VerifyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.VerifyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getFingerdata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.finger.FingerData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.finger.VerifyRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.finger.VerifyRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional FingerData fingerData = 2;
 * @return {?proto.finger.FingerData}
 */
proto.finger.VerifyRequest.prototype.getFingerdata = function() {
  return /** @type{?proto.finger.FingerData} */ (
    jspb.Message.getWrapperField(this, proto.finger.FingerData, 2));
};


/** @param {?proto.finger.FingerData|undefined} value */
proto.finger.VerifyRequest.prototype.setFingerdata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.finger.VerifyRequest.prototype.clearFingerdata = function() {
  this.setFingerdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.finger.VerifyRequest.prototype.hasFingerdata = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.VerifyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finger.VerifyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.VerifyResponse.displayName = 'proto.finger.VerifyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.VerifyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.VerifyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.VerifyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.VerifyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.VerifyResponse}
 */
proto.finger.VerifyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.VerifyResponse;
  return proto.finger.VerifyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.VerifyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.VerifyResponse}
 */
proto.finger.VerifyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.VerifyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.VerifyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.VerifyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.VerifyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.GetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finger.GetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.GetConfigRequest.displayName = 'proto.finger.GetConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.GetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.GetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.GetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.GetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.GetConfigRequest}
 */
proto.finger.GetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.GetConfigRequest;
  return proto.finger.GetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.GetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.GetConfigRequest}
 */
proto.finger.GetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.GetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.GetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.GetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.GetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.finger.GetConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.finger.GetConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.GetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finger.GetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.GetConfigResponse.displayName = 'proto.finger.GetConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.GetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.GetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.GetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.GetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.finger.FingerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.GetConfigResponse}
 */
proto.finger.GetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.GetConfigResponse;
  return proto.finger.GetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.GetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.GetConfigResponse}
 */
proto.finger.GetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.finger.FingerConfig;
      reader.readMessage(value,proto.finger.FingerConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.GetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.GetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.GetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.GetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.finger.FingerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional FingerConfig config = 1;
 * @return {?proto.finger.FingerConfig}
 */
proto.finger.GetConfigResponse.prototype.getConfig = function() {
  return /** @type{?proto.finger.FingerConfig} */ (
    jspb.Message.getWrapperField(this, proto.finger.FingerConfig, 1));
};


/** @param {?proto.finger.FingerConfig|undefined} value */
proto.finger.GetConfigResponse.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.finger.GetConfigResponse.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.finger.GetConfigResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.SetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finger.SetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.SetConfigRequest.displayName = 'proto.finger.SetConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.SetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.SetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.SetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.SetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    config: (f = msg.getConfig()) && proto.finger.FingerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.SetConfigRequest}
 */
proto.finger.SetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.SetConfigRequest;
  return proto.finger.SetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.SetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.SetConfigRequest}
 */
proto.finger.SetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = new proto.finger.FingerConfig;
      reader.readMessage(value,proto.finger.FingerConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.SetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.SetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.SetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.SetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.finger.FingerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.finger.SetConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.finger.SetConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional FingerConfig config = 2;
 * @return {?proto.finger.FingerConfig}
 */
proto.finger.SetConfigRequest.prototype.getConfig = function() {
  return /** @type{?proto.finger.FingerConfig} */ (
    jspb.Message.getWrapperField(this, proto.finger.FingerConfig, 2));
};


/** @param {?proto.finger.FingerConfig|undefined} value */
proto.finger.SetConfigRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.finger.SetConfigRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.finger.SetConfigRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.SetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finger.SetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.SetConfigResponse.displayName = 'proto.finger.SetConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.SetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.SetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.SetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.SetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.SetConfigResponse}
 */
proto.finger.SetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.SetConfigResponse;
  return proto.finger.SetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.SetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.SetConfigResponse}
 */
proto.finger.SetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.SetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.SetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.SetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.SetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.SetConfigMultiRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.finger.SetConfigMultiRequest.repeatedFields_, null);
};
goog.inherits(proto.finger.SetConfigMultiRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.SetConfigMultiRequest.displayName = 'proto.finger.SetConfigMultiRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.finger.SetConfigMultiRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.SetConfigMultiRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.SetConfigMultiRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.SetConfigMultiRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.SetConfigMultiRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceidsList: jspb.Message.getRepeatedField(msg, 1),
    config: (f = msg.getConfig()) && proto.finger.FingerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.SetConfigMultiRequest}
 */
proto.finger.SetConfigMultiRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.SetConfigMultiRequest;
  return proto.finger.SetConfigMultiRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.SetConfigMultiRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.SetConfigMultiRequest}
 */
proto.finger.SetConfigMultiRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceidsList(value);
      break;
    case 2:
      var value = new proto.finger.FingerConfig;
      reader.readMessage(value,proto.finger.FingerConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.SetConfigMultiRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.SetConfigMultiRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.SetConfigMultiRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.SetConfigMultiRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.finger.FingerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 deviceIDs = 1;
 * @return {!Array.<number>}
 */
proto.finger.SetConfigMultiRequest.prototype.getDeviceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.finger.SetConfigMultiRequest.prototype.setDeviceidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.finger.SetConfigMultiRequest.prototype.addDeviceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.finger.SetConfigMultiRequest.prototype.clearDeviceidsList = function() {
  this.setDeviceidsList([]);
};


/**
 * optional FingerConfig config = 2;
 * @return {?proto.finger.FingerConfig}
 */
proto.finger.SetConfigMultiRequest.prototype.getConfig = function() {
  return /** @type{?proto.finger.FingerConfig} */ (
    jspb.Message.getWrapperField(this, proto.finger.FingerConfig, 2));
};


/** @param {?proto.finger.FingerConfig|undefined} value */
proto.finger.SetConfigMultiRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.finger.SetConfigMultiRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.finger.SetConfigMultiRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.SetConfigMultiResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.finger.SetConfigMultiResponse.repeatedFields_, null);
};
goog.inherits(proto.finger.SetConfigMultiResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.SetConfigMultiResponse.displayName = 'proto.finger.SetConfigMultiResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.finger.SetConfigMultiResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.SetConfigMultiResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.SetConfigMultiResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.SetConfigMultiResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.SetConfigMultiResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceerrorsList: jspb.Message.toObjectList(msg.getDeviceerrorsList(),
    err_pb.ErrorResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.SetConfigMultiResponse}
 */
proto.finger.SetConfigMultiResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.SetConfigMultiResponse;
  return proto.finger.SetConfigMultiResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.SetConfigMultiResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.SetConfigMultiResponse}
 */
proto.finger.SetConfigMultiResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new err_pb.ErrorResponse;
      reader.readMessage(value,err_pb.ErrorResponse.deserializeBinaryFromReader);
      msg.addDeviceerrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.SetConfigMultiResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.SetConfigMultiResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.SetConfigMultiResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.SetConfigMultiResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceerrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      err_pb.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated err.ErrorResponse deviceErrors = 1;
 * @return {!Array.<!proto.err.ErrorResponse>}
 */
proto.finger.SetConfigMultiResponse.prototype.getDeviceerrorsList = function() {
  return /** @type{!Array.<!proto.err.ErrorResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, err_pb.ErrorResponse, 1));
};


/** @param {!Array.<!proto.err.ErrorResponse>} value */
proto.finger.SetConfigMultiResponse.prototype.setDeviceerrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.err.ErrorResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.err.ErrorResponse}
 */
proto.finger.SetConfigMultiResponse.prototype.addDeviceerrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.err.ErrorResponse, opt_index);
};


proto.finger.SetConfigMultiResponse.prototype.clearDeviceerrorsList = function() {
  this.setDeviceerrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.finger.FingerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.finger.FingerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.finger.FingerConfig.displayName = 'proto.finger.FingerConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.finger.FingerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.finger.FingerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.finger.FingerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.FingerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    securitylevel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fastmode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sensitivity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sensormode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    templateformat: jspb.Message.getFieldWithDefault(msg, 5, 0),
    scantimeout: jspb.Message.getFieldWithDefault(msg, 6, 0),
    advancedenrollment: jspb.Message.getFieldWithDefault(msg, 7, false),
    showimage: jspb.Message.getFieldWithDefault(msg, 8, false),
    lfdlevel: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.finger.FingerConfig}
 */
proto.finger.FingerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.finger.FingerConfig;
  return proto.finger.FingerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.finger.FingerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.finger.FingerConfig}
 */
proto.finger.FingerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.finger.SecurityLevel} */ (reader.readEnum());
      msg.setSecuritylevel(value);
      break;
    case 2:
      var value = /** @type {!proto.finger.FastMode} */ (reader.readEnum());
      msg.setFastmode(value);
      break;
    case 3:
      var value = /** @type {!proto.finger.Sensitivity} */ (reader.readEnum());
      msg.setSensitivity(value);
      break;
    case 4:
      var value = /** @type {!proto.finger.SensorMode} */ (reader.readEnum());
      msg.setSensormode(value);
      break;
    case 5:
      var value = /** @type {!proto.finger.TemplateFormat} */ (reader.readEnum());
      msg.setTemplateformat(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScantimeout(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdvancedenrollment(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowimage(value);
      break;
    case 9:
      var value = /** @type {!proto.finger.LFDLevel} */ (reader.readEnum());
      msg.setLfdlevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.finger.FingerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.finger.FingerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.finger.FingerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.finger.FingerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecuritylevel();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFastmode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSensitivity();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSensormode();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTemplateformat();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getScantimeout();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAdvancedenrollment();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getShowimage();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getLfdlevel();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * optional SecurityLevel securityLevel = 1;
 * @return {!proto.finger.SecurityLevel}
 */
proto.finger.FingerConfig.prototype.getSecuritylevel = function() {
  return /** @type {!proto.finger.SecurityLevel} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.finger.SecurityLevel} value */
proto.finger.FingerConfig.prototype.setSecuritylevel = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional FastMode fastMode = 2;
 * @return {!proto.finger.FastMode}
 */
proto.finger.FingerConfig.prototype.getFastmode = function() {
  return /** @type {!proto.finger.FastMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.finger.FastMode} value */
proto.finger.FingerConfig.prototype.setFastmode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Sensitivity sensitivity = 3;
 * @return {!proto.finger.Sensitivity}
 */
proto.finger.FingerConfig.prototype.getSensitivity = function() {
  return /** @type {!proto.finger.Sensitivity} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.finger.Sensitivity} value */
proto.finger.FingerConfig.prototype.setSensitivity = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional SensorMode sensorMode = 4;
 * @return {!proto.finger.SensorMode}
 */
proto.finger.FingerConfig.prototype.getSensormode = function() {
  return /** @type {!proto.finger.SensorMode} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.finger.SensorMode} value */
proto.finger.FingerConfig.prototype.setSensormode = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional TemplateFormat templateFormat = 5;
 * @return {!proto.finger.TemplateFormat}
 */
proto.finger.FingerConfig.prototype.getTemplateformat = function() {
  return /** @type {!proto.finger.TemplateFormat} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.finger.TemplateFormat} value */
proto.finger.FingerConfig.prototype.setTemplateformat = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 scanTimeout = 6;
 * @return {number}
 */
proto.finger.FingerConfig.prototype.getScantimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.finger.FingerConfig.prototype.setScantimeout = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool advancedEnrollment = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.finger.FingerConfig.prototype.getAdvancedenrollment = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.finger.FingerConfig.prototype.setAdvancedenrollment = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool showImage = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.finger.FingerConfig.prototype.getShowimage = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.finger.FingerConfig.prototype.setShowimage = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional LFDLevel LFDLevel = 9;
 * @return {!proto.finger.LFDLevel}
 */
proto.finger.FingerConfig.prototype.getLfdlevel = function() {
  return /** @type {!proto.finger.LFDLevel} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.finger.LFDLevel} value */
proto.finger.FingerConfig.prototype.setLfdlevel = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * @enum {number}
 */
proto.finger.TemplateFormat = {
  TEMPLATE_FORMAT_SUPREMA: 0,
  TEMPLATE_FORMAT_ISO: 1,
  TEMPLATE_FORMAT_ANSI: 2
};

/**
 * @enum {number}
 */
proto.finger.SecurityLevel = {
  SECURE: 0,
  MORE_SECURE: 1,
  MOST_SECURE: 2,
  DEFAULT_SECURITY: 0
};

/**
 * @enum {number}
 */
proto.finger.FastMode = {
  AUTOMATIC: 0,
  FAST: 1,
  FASTER: 2,
  FASTEST: 3,
  DEFAULT_FAST: 0
};

/**
 * @enum {number}
 */
proto.finger.Sensitivity = {
  LOWEST_SENSITIVE: 0,
  LEVEL0_SENSITIVE: 0,
  LEVEL1_SENSITIVE: 1,
  LEVEL2_SENSITIVE: 2,
  LEVEL3_SENSITIVE: 3,
  LEVEL4_SENSITIVE: 4,
  LEVEL5_SENSITIVE: 5,
  LEVEL6_SENSITIVE: 6,
  LEVEL7_SENSITIVE: 7,
  HIGHEST_SENSITIVE: 7,
  DEFAULT_SENSITITY: 7
};

/**
 * @enum {number}
 */
proto.finger.SensorMode = {
  ALWAYS_ON: 0,
  ACTIVATED_BY_PROXIMITY: 1,
  DEFAULT_SENSOR_MODE: 0
};

/**
 * @enum {number}
 */
proto.finger.LFDLevel = {
  NOT_USED: 0,
  STRICT: 1,
  MORE_STRICT: 2,
  MOST_STRICT: 3,
  DEFAULT_LFD: 0
};

goog.object.extend(exports, proto.finger);
