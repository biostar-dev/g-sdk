/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var err_pb = require('./err_pb.js');
goog.exportSymbol('proto.tna.GetConfigRequest', null, global);
goog.exportSymbol('proto.tna.GetConfigResponse', null, global);
goog.exportSymbol('proto.tna.GetJobCodeLogRequest', null, global);
goog.exportSymbol('proto.tna.GetJobCodeLogResponse', null, global);
goog.exportSymbol('proto.tna.GetTNALogRequest', null, global);
goog.exportSymbol('proto.tna.GetTNALogResponse', null, global);
goog.exportSymbol('proto.tna.JobCode', null, global);
goog.exportSymbol('proto.tna.JobCodeEventFilter', null, global);
goog.exportSymbol('proto.tna.JobCodeLog', null, global);
goog.exportSymbol('proto.tna.Key', null, global);
goog.exportSymbol('proto.tna.Mode', null, global);
goog.exportSymbol('proto.tna.SetConfigMultiRequest', null, global);
goog.exportSymbol('proto.tna.SetConfigMultiResponse', null, global);
goog.exportSymbol('proto.tna.SetConfigRequest', null, global);
goog.exportSymbol('proto.tna.SetConfigResponse', null, global);
goog.exportSymbol('proto.tna.TNAConfig', null, global);
goog.exportSymbol('proto.tna.TNAEventFilter', null, global);
goog.exportSymbol('proto.tna.TNALog', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.TNAConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tna.TNAConfig.repeatedFields_, null);
};
goog.inherits(proto.tna.TNAConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.TNAConfig.displayName = 'proto.tna.TNAConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tna.TNAConfig.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.TNAConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.TNAConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.TNAConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.TNAConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    key: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isrequired: jspb.Message.getFieldWithDefault(msg, 3, false),
    schedulesList: jspb.Message.getRepeatedField(msg, 4),
    labelsList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.TNAConfig}
 */
proto.tna.TNAConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.TNAConfig;
  return proto.tna.TNAConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.TNAConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.TNAConfig}
 */
proto.tna.TNAConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tna.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {!proto.tna.Key} */ (reader.readEnum());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsrequired(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setSchedulesList(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.TNAConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.TNAConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.TNAConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.TNAConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKey();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIsrequired();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSchedulesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional Mode mode = 1;
 * @return {!proto.tna.Mode}
 */
proto.tna.TNAConfig.prototype.getMode = function() {
  return /** @type {!proto.tna.Mode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.tna.Mode} value */
proto.tna.TNAConfig.prototype.setMode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Key key = 2;
 * @return {!proto.tna.Key}
 */
proto.tna.TNAConfig.prototype.getKey = function() {
  return /** @type {!proto.tna.Key} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.tna.Key} value */
proto.tna.TNAConfig.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool isRequired = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tna.TNAConfig.prototype.getIsrequired = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.tna.TNAConfig.prototype.setIsrequired = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated uint32 schedules = 4;
 * @return {!Array.<number>}
 */
proto.tna.TNAConfig.prototype.getSchedulesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.tna.TNAConfig.prototype.setSchedulesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tna.TNAConfig.prototype.addSchedules = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.tna.TNAConfig.prototype.clearSchedulesList = function() {
  this.setSchedulesList([]);
};


/**
 * repeated string labels = 5;
 * @return {!Array.<string>}
 */
proto.tna.TNAConfig.prototype.getLabelsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<string>} value */
proto.tna.TNAConfig.prototype.setLabelsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.tna.TNAConfig.prototype.addLabels = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.tna.TNAConfig.prototype.clearLabelsList = function() {
  this.setLabelsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.GetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tna.GetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.GetConfigRequest.displayName = 'proto.tna.GetConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.GetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.GetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.GetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.GetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.GetConfigRequest}
 */
proto.tna.GetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.GetConfigRequest;
  return proto.tna.GetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.GetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.GetConfigRequest}
 */
proto.tna.GetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.GetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.GetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.GetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.GetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.tna.GetConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tna.GetConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.GetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tna.GetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.GetConfigResponse.displayName = 'proto.tna.GetConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.GetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.GetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.GetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.GetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.tna.TNAConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.GetConfigResponse}
 */
proto.tna.GetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.GetConfigResponse;
  return proto.tna.GetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.GetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.GetConfigResponse}
 */
proto.tna.GetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tna.TNAConfig;
      reader.readMessage(value,proto.tna.TNAConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.GetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.GetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.GetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.GetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tna.TNAConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional TNAConfig config = 1;
 * @return {?proto.tna.TNAConfig}
 */
proto.tna.GetConfigResponse.prototype.getConfig = function() {
  return /** @type{?proto.tna.TNAConfig} */ (
    jspb.Message.getWrapperField(this, proto.tna.TNAConfig, 1));
};


/** @param {?proto.tna.TNAConfig|undefined} value */
proto.tna.GetConfigResponse.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.tna.GetConfigResponse.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tna.GetConfigResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.SetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tna.SetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.SetConfigRequest.displayName = 'proto.tna.SetConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.SetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.SetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.SetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.SetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    config: (f = msg.getConfig()) && proto.tna.TNAConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.SetConfigRequest}
 */
proto.tna.SetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.SetConfigRequest;
  return proto.tna.SetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.SetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.SetConfigRequest}
 */
proto.tna.SetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = new proto.tna.TNAConfig;
      reader.readMessage(value,proto.tna.TNAConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.SetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.SetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.SetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.SetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tna.TNAConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.tna.SetConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tna.SetConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional TNAConfig config = 2;
 * @return {?proto.tna.TNAConfig}
 */
proto.tna.SetConfigRequest.prototype.getConfig = function() {
  return /** @type{?proto.tna.TNAConfig} */ (
    jspb.Message.getWrapperField(this, proto.tna.TNAConfig, 2));
};


/** @param {?proto.tna.TNAConfig|undefined} value */
proto.tna.SetConfigRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.tna.SetConfigRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tna.SetConfigRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.SetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tna.SetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.SetConfigResponse.displayName = 'proto.tna.SetConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.SetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.SetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.SetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.SetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.SetConfigResponse}
 */
proto.tna.SetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.SetConfigResponse;
  return proto.tna.SetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.SetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.SetConfigResponse}
 */
proto.tna.SetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.SetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.SetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.SetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.SetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.SetConfigMultiRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tna.SetConfigMultiRequest.repeatedFields_, null);
};
goog.inherits(proto.tna.SetConfigMultiRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.SetConfigMultiRequest.displayName = 'proto.tna.SetConfigMultiRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tna.SetConfigMultiRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.SetConfigMultiRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.SetConfigMultiRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.SetConfigMultiRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.SetConfigMultiRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceidsList: jspb.Message.getRepeatedField(msg, 1),
    config: (f = msg.getConfig()) && proto.tna.TNAConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.SetConfigMultiRequest}
 */
proto.tna.SetConfigMultiRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.SetConfigMultiRequest;
  return proto.tna.SetConfigMultiRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.SetConfigMultiRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.SetConfigMultiRequest}
 */
proto.tna.SetConfigMultiRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceidsList(value);
      break;
    case 2:
      var value = new proto.tna.TNAConfig;
      reader.readMessage(value,proto.tna.TNAConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.SetConfigMultiRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.SetConfigMultiRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.SetConfigMultiRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.SetConfigMultiRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tna.TNAConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 deviceIDs = 1;
 * @return {!Array.<number>}
 */
proto.tna.SetConfigMultiRequest.prototype.getDeviceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.tna.SetConfigMultiRequest.prototype.setDeviceidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tna.SetConfigMultiRequest.prototype.addDeviceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.tna.SetConfigMultiRequest.prototype.clearDeviceidsList = function() {
  this.setDeviceidsList([]);
};


/**
 * optional TNAConfig config = 2;
 * @return {?proto.tna.TNAConfig}
 */
proto.tna.SetConfigMultiRequest.prototype.getConfig = function() {
  return /** @type{?proto.tna.TNAConfig} */ (
    jspb.Message.getWrapperField(this, proto.tna.TNAConfig, 2));
};


/** @param {?proto.tna.TNAConfig|undefined} value */
proto.tna.SetConfigMultiRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.tna.SetConfigMultiRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tna.SetConfigMultiRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.SetConfigMultiResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tna.SetConfigMultiResponse.repeatedFields_, null);
};
goog.inherits(proto.tna.SetConfigMultiResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.SetConfigMultiResponse.displayName = 'proto.tna.SetConfigMultiResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tna.SetConfigMultiResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.SetConfigMultiResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.SetConfigMultiResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.SetConfigMultiResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.SetConfigMultiResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceerrorsList: jspb.Message.toObjectList(msg.getDeviceerrorsList(),
    err_pb.ErrorResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.SetConfigMultiResponse}
 */
proto.tna.SetConfigMultiResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.SetConfigMultiResponse;
  return proto.tna.SetConfigMultiResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.SetConfigMultiResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.SetConfigMultiResponse}
 */
proto.tna.SetConfigMultiResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new err_pb.ErrorResponse;
      reader.readMessage(value,err_pb.ErrorResponse.deserializeBinaryFromReader);
      msg.addDeviceerrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.SetConfigMultiResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.SetConfigMultiResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.SetConfigMultiResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.SetConfigMultiResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceerrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      err_pb.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated err.ErrorResponse deviceErrors = 1;
 * @return {!Array.<!proto.err.ErrorResponse>}
 */
proto.tna.SetConfigMultiResponse.prototype.getDeviceerrorsList = function() {
  return /** @type{!Array.<!proto.err.ErrorResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, err_pb.ErrorResponse, 1));
};


/** @param {!Array.<!proto.err.ErrorResponse>} value */
proto.tna.SetConfigMultiResponse.prototype.setDeviceerrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.err.ErrorResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.err.ErrorResponse}
 */
proto.tna.SetConfigMultiResponse.prototype.addDeviceerrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.err.ErrorResponse, opt_index);
};


proto.tna.SetConfigMultiResponse.prototype.clearDeviceerrorsList = function() {
  this.setDeviceerrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.JobCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tna.JobCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.JobCode.displayName = 'proto.tna.JobCode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.JobCode.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.JobCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.JobCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.JobCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    label: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.JobCode}
 */
proto.tna.JobCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.JobCode;
  return proto.tna.JobCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.JobCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.JobCode}
 */
proto.tna.JobCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.JobCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.JobCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.JobCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.JobCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.tna.JobCode.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tna.JobCode.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.tna.JobCode.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tna.JobCode.prototype.setLabel = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.TNALog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tna.TNALog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.TNALog.displayName = 'proto.tna.TNALog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.TNALog.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.TNALog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.TNALog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.TNALog.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    deviceid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventcode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    tnakey: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.TNALog}
 */
proto.tna.TNALog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.TNALog;
  return proto.tna.TNALog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.TNALog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.TNALog}
 */
proto.tna.TNALog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEventcode(value);
      break;
    case 6:
      var value = /** @type {!proto.tna.Key} */ (reader.readEnum());
      msg.setTnakey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.TNALog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.TNALog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.TNALog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.TNALog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventcode();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getTnakey();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional uint32 ID = 1;
 * @return {number}
 */
proto.tna.TNALog.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tna.TNALog.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 timestamp = 2;
 * @return {number}
 */
proto.tna.TNALog.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tna.TNALog.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 deviceID = 3;
 * @return {number}
 */
proto.tna.TNALog.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tna.TNALog.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string userID = 4;
 * @return {string}
 */
proto.tna.TNALog.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.tna.TNALog.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 eventCode = 5;
 * @return {number}
 */
proto.tna.TNALog.prototype.getEventcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tna.TNALog.prototype.setEventcode = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional Key TNAKey = 6;
 * @return {!proto.tna.Key}
 */
proto.tna.TNALog.prototype.getTnakey = function() {
  return /** @type {!proto.tna.Key} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.tna.Key} value */
proto.tna.TNALog.prototype.setTnakey = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.TNAEventFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tna.TNAEventFilter.repeatedFields_, null);
};
goog.inherits(proto.tna.TNAEventFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.TNAEventFilter.displayName = 'proto.tna.TNAEventFilter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tna.TNAEventFilter.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.TNAEventFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.TNAEventFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.TNAEventFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.TNAEventFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endtime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    useridsList: jspb.Message.getRepeatedField(msg, 3),
    tnakeysList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.TNAEventFilter}
 */
proto.tna.TNAEventFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.TNAEventFilter;
  return proto.tna.TNAEventFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.TNAEventFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.TNAEventFilter}
 */
proto.tna.TNAEventFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStarttime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndtime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserids(value);
      break;
    case 4:
      var value = /** @type {!Array.<!proto.tna.Key>} */ (reader.readPackedEnum());
      msg.setTnakeysList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.TNAEventFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.TNAEventFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.TNAEventFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.TNAEventFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEndtime();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUseridsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getTnakeysList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
};


/**
 * optional uint32 startTime = 1;
 * @return {number}
 */
proto.tna.TNAEventFilter.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tna.TNAEventFilter.prototype.setStarttime = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 endTime = 2;
 * @return {number}
 */
proto.tna.TNAEventFilter.prototype.getEndtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tna.TNAEventFilter.prototype.setEndtime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string userIDs = 3;
 * @return {!Array.<string>}
 */
proto.tna.TNAEventFilter.prototype.getUseridsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.tna.TNAEventFilter.prototype.setUseridsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.tna.TNAEventFilter.prototype.addUserids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.tna.TNAEventFilter.prototype.clearUseridsList = function() {
  this.setUseridsList([]);
};


/**
 * repeated Key TNAKeys = 4;
 * @return {!Array.<!proto.tna.Key>}
 */
proto.tna.TNAEventFilter.prototype.getTnakeysList = function() {
  return /** @type {!Array.<!proto.tna.Key>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<!proto.tna.Key>} value */
proto.tna.TNAEventFilter.prototype.setTnakeysList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.tna.Key} value
 * @param {number=} opt_index
 */
proto.tna.TNAEventFilter.prototype.addTnakeys = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.tna.TNAEventFilter.prototype.clearTnakeysList = function() {
  this.setTnakeysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.JobCodeLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tna.JobCodeLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.JobCodeLog.displayName = 'proto.tna.JobCodeLog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.JobCodeLog.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.JobCodeLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.JobCodeLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.JobCodeLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    deviceid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventcode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    jobcode: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.JobCodeLog}
 */
proto.tna.JobCodeLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.JobCodeLog;
  return proto.tna.JobCodeLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.JobCodeLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.JobCodeLog}
 */
proto.tna.JobCodeLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEventcode(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setJobcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.JobCodeLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.JobCodeLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.JobCodeLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.JobCodeLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventcode();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getJobcode();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 ID = 1;
 * @return {number}
 */
proto.tna.JobCodeLog.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tna.JobCodeLog.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 timestamp = 2;
 * @return {number}
 */
proto.tna.JobCodeLog.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tna.JobCodeLog.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 deviceID = 3;
 * @return {number}
 */
proto.tna.JobCodeLog.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tna.JobCodeLog.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string userID = 4;
 * @return {string}
 */
proto.tna.JobCodeLog.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.tna.JobCodeLog.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 eventCode = 5;
 * @return {number}
 */
proto.tna.JobCodeLog.prototype.getEventcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tna.JobCodeLog.prototype.setEventcode = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 jobCode = 6;
 * @return {number}
 */
proto.tna.JobCodeLog.prototype.getJobcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.tna.JobCodeLog.prototype.setJobcode = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.JobCodeEventFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tna.JobCodeEventFilter.repeatedFields_, null);
};
goog.inherits(proto.tna.JobCodeEventFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.JobCodeEventFilter.displayName = 'proto.tna.JobCodeEventFilter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tna.JobCodeEventFilter.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.JobCodeEventFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.JobCodeEventFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.JobCodeEventFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.JobCodeEventFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endtime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    useridsList: jspb.Message.getRepeatedField(msg, 3),
    jobcodesList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.JobCodeEventFilter}
 */
proto.tna.JobCodeEventFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.JobCodeEventFilter;
  return proto.tna.JobCodeEventFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.JobCodeEventFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.JobCodeEventFilter}
 */
proto.tna.JobCodeEventFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStarttime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndtime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserids(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setJobcodesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.JobCodeEventFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.JobCodeEventFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.JobCodeEventFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.JobCodeEventFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEndtime();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUseridsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getJobcodesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 startTime = 1;
 * @return {number}
 */
proto.tna.JobCodeEventFilter.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tna.JobCodeEventFilter.prototype.setStarttime = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 endTime = 2;
 * @return {number}
 */
proto.tna.JobCodeEventFilter.prototype.getEndtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tna.JobCodeEventFilter.prototype.setEndtime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string userIDs = 3;
 * @return {!Array.<string>}
 */
proto.tna.JobCodeEventFilter.prototype.getUseridsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.tna.JobCodeEventFilter.prototype.setUseridsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.tna.JobCodeEventFilter.prototype.addUserids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.tna.JobCodeEventFilter.prototype.clearUseridsList = function() {
  this.setUseridsList([]);
};


/**
 * repeated uint32 jobCodes = 4;
 * @return {!Array.<number>}
 */
proto.tna.JobCodeEventFilter.prototype.getJobcodesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.tna.JobCodeEventFilter.prototype.setJobcodesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.tna.JobCodeEventFilter.prototype.addJobcodes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.tna.JobCodeEventFilter.prototype.clearJobcodesList = function() {
  this.setJobcodesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.GetTNALogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tna.GetTNALogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.GetTNALogRequest.displayName = 'proto.tna.GetTNALogRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.GetTNALogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.GetTNALogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.GetTNALogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.GetTNALogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    starteventid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxnumoflog: jspb.Message.getFieldWithDefault(msg, 3, 0),
    filter: (f = msg.getFilter()) && proto.tna.TNAEventFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.GetTNALogRequest}
 */
proto.tna.GetTNALogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.GetTNALogRequest;
  return proto.tna.GetTNALogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.GetTNALogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.GetTNALogRequest}
 */
proto.tna.GetTNALogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStarteventid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxnumoflog(value);
      break;
    case 4:
      var value = new proto.tna.TNAEventFilter;
      reader.readMessage(value,proto.tna.TNAEventFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.GetTNALogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.GetTNALogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.GetTNALogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.GetTNALogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStarteventid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxnumoflog();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tna.TNAEventFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.tna.GetTNALogRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tna.GetTNALogRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 startEventID = 2;
 * @return {number}
 */
proto.tna.GetTNALogRequest.prototype.getStarteventid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tna.GetTNALogRequest.prototype.setStarteventid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 maxNumOfLog = 3;
 * @return {number}
 */
proto.tna.GetTNALogRequest.prototype.getMaxnumoflog = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tna.GetTNALogRequest.prototype.setMaxnumoflog = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional TNAEventFilter filter = 4;
 * @return {?proto.tna.TNAEventFilter}
 */
proto.tna.GetTNALogRequest.prototype.getFilter = function() {
  return /** @type{?proto.tna.TNAEventFilter} */ (
    jspb.Message.getWrapperField(this, proto.tna.TNAEventFilter, 4));
};


/** @param {?proto.tna.TNAEventFilter|undefined} value */
proto.tna.GetTNALogRequest.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.tna.GetTNALogRequest.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tna.GetTNALogRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.GetTNALogResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tna.GetTNALogResponse.repeatedFields_, null);
};
goog.inherits(proto.tna.GetTNALogResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.GetTNALogResponse.displayName = 'proto.tna.GetTNALogResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tna.GetTNALogResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.GetTNALogResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.GetTNALogResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.GetTNALogResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.GetTNALogResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tnaeventsList: jspb.Message.toObjectList(msg.getTnaeventsList(),
    proto.tna.TNALog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.GetTNALogResponse}
 */
proto.tna.GetTNALogResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.GetTNALogResponse;
  return proto.tna.GetTNALogResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.GetTNALogResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.GetTNALogResponse}
 */
proto.tna.GetTNALogResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tna.TNALog;
      reader.readMessage(value,proto.tna.TNALog.deserializeBinaryFromReader);
      msg.addTnaevents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.GetTNALogResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.GetTNALogResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.GetTNALogResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.GetTNALogResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTnaeventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tna.TNALog.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TNALog TNAEvents = 1;
 * @return {!Array.<!proto.tna.TNALog>}
 */
proto.tna.GetTNALogResponse.prototype.getTnaeventsList = function() {
  return /** @type{!Array.<!proto.tna.TNALog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tna.TNALog, 1));
};


/** @param {!Array.<!proto.tna.TNALog>} value */
proto.tna.GetTNALogResponse.prototype.setTnaeventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tna.TNALog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tna.TNALog}
 */
proto.tna.GetTNALogResponse.prototype.addTnaevents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tna.TNALog, opt_index);
};


proto.tna.GetTNALogResponse.prototype.clearTnaeventsList = function() {
  this.setTnaeventsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.GetJobCodeLogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tna.GetJobCodeLogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.GetJobCodeLogRequest.displayName = 'proto.tna.GetJobCodeLogRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.GetJobCodeLogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.GetJobCodeLogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.GetJobCodeLogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.GetJobCodeLogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    starteventid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxnumoflog: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.GetJobCodeLogRequest}
 */
proto.tna.GetJobCodeLogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.GetJobCodeLogRequest;
  return proto.tna.GetJobCodeLogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.GetJobCodeLogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.GetJobCodeLogRequest}
 */
proto.tna.GetJobCodeLogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStarteventid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxnumoflog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.GetJobCodeLogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.GetJobCodeLogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.GetJobCodeLogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.GetJobCodeLogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStarteventid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxnumoflog();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.tna.GetJobCodeLogRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tna.GetJobCodeLogRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 startEventID = 2;
 * @return {number}
 */
proto.tna.GetJobCodeLogRequest.prototype.getStarteventid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tna.GetJobCodeLogRequest.prototype.setStarteventid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 maxNumOfLog = 3;
 * @return {number}
 */
proto.tna.GetJobCodeLogRequest.prototype.getMaxnumoflog = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tna.GetJobCodeLogRequest.prototype.setMaxnumoflog = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tna.GetJobCodeLogResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tna.GetJobCodeLogResponse.repeatedFields_, null);
};
goog.inherits(proto.tna.GetJobCodeLogResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tna.GetJobCodeLogResponse.displayName = 'proto.tna.GetJobCodeLogResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tna.GetJobCodeLogResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tna.GetJobCodeLogResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tna.GetJobCodeLogResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tna.GetJobCodeLogResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.GetJobCodeLogResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobcodeeventsList: jspb.Message.toObjectList(msg.getJobcodeeventsList(),
    proto.tna.JobCodeLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tna.GetJobCodeLogResponse}
 */
proto.tna.GetJobCodeLogResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tna.GetJobCodeLogResponse;
  return proto.tna.GetJobCodeLogResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tna.GetJobCodeLogResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tna.GetJobCodeLogResponse}
 */
proto.tna.GetJobCodeLogResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tna.JobCodeLog;
      reader.readMessage(value,proto.tna.JobCodeLog.deserializeBinaryFromReader);
      msg.addJobcodeevents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tna.GetJobCodeLogResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tna.GetJobCodeLogResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tna.GetJobCodeLogResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tna.GetJobCodeLogResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobcodeeventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tna.JobCodeLog.serializeBinaryToWriter
    );
  }
};


/**
 * repeated JobCodeLog jobCodeEvents = 1;
 * @return {!Array.<!proto.tna.JobCodeLog>}
 */
proto.tna.GetJobCodeLogResponse.prototype.getJobcodeeventsList = function() {
  return /** @type{!Array.<!proto.tna.JobCodeLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tna.JobCodeLog, 1));
};


/** @param {!Array.<!proto.tna.JobCodeLog>} value */
proto.tna.GetJobCodeLogResponse.prototype.setJobcodeeventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tna.JobCodeLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tna.JobCodeLog}
 */
proto.tna.GetJobCodeLogResponse.prototype.addJobcodeevents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tna.JobCodeLog, opt_index);
};


proto.tna.GetJobCodeLogResponse.prototype.clearJobcodeeventsList = function() {
  this.setJobcodeeventsList([]);
};


/**
 * @enum {number}
 */
proto.tna.Mode = {
  UNUSED: 0,
  BY_USER: 1,
  BY_SCHEDULE: 2,
  LAST_CHOICE: 3,
  FIXED: 4
};

/**
 * @enum {number}
 */
proto.tna.Key = {
  UNSPECIFIED: 0,
  KEY_1: 1,
  KEY_2: 2,
  KEY_3: 3,
  KEY_4: 4,
  KEY_5: 5,
  KEY_6: 6,
  KEY_7: 7,
  KEY_8: 8,
  KEY_9: 9,
  KEY_10: 10,
  KEY_11: 11,
  KEY_12: 12,
  KEY_13: 13,
  KEY_14: 14,
  KEY_15: 15,
  KEY_16: 16
};

goog.object.extend(exports, proto.tna);
