/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var err_pb = require('./err_pb.js');
var connect_pb = require('./connect_pb.js');
goog.exportSymbol('proto.network.EthernetBaseband', null, global);
goog.exportSymbol('proto.network.GetIPConfigRequest', null, global);
goog.exportSymbol('proto.network.GetIPConfigResponse', null, global);
goog.exportSymbol('proto.network.GetWLANConfigRequest', null, global);
goog.exportSymbol('proto.network.GetWLANConfigResponse', null, global);
goog.exportSymbol('proto.network.IPConfig', null, global);
goog.exportSymbol('proto.network.SetIPConfigMultiRequest', null, global);
goog.exportSymbol('proto.network.SetIPConfigMultiResponse', null, global);
goog.exportSymbol('proto.network.SetIPConfigRequest', null, global);
goog.exportSymbol('proto.network.SetIPConfigResponse', null, global);
goog.exportSymbol('proto.network.SetWLANConfigMultiRequest', null, global);
goog.exportSymbol('proto.network.SetWLANConfigMultiResponse', null, global);
goog.exportSymbol('proto.network.SetWLANConfigRequest', null, global);
goog.exportSymbol('proto.network.SetWLANConfigResponse', null, global);
goog.exportSymbol('proto.network.WLANAuthType', null, global);
goog.exportSymbol('proto.network.WLANConfig', null, global);
goog.exportSymbol('proto.network.WLANEncryptionType', null, global);
goog.exportSymbol('proto.network.WLANOperationMode', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.GetIPConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.GetIPConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.GetIPConfigRequest.displayName = 'proto.network.GetIPConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.GetIPConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.network.GetIPConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.GetIPConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.GetIPConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.GetIPConfigRequest}
 */
proto.network.GetIPConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.GetIPConfigRequest;
  return proto.network.GetIPConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.GetIPConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.GetIPConfigRequest}
 */
proto.network.GetIPConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.GetIPConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.GetIPConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.GetIPConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.GetIPConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.network.GetIPConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.network.GetIPConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.GetIPConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.GetIPConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.GetIPConfigResponse.displayName = 'proto.network.GetIPConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.GetIPConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.network.GetIPConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.GetIPConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.GetIPConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.network.IPConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.GetIPConfigResponse}
 */
proto.network.GetIPConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.GetIPConfigResponse;
  return proto.network.GetIPConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.GetIPConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.GetIPConfigResponse}
 */
proto.network.GetIPConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.network.IPConfig;
      reader.readMessage(value,proto.network.IPConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.GetIPConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.GetIPConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.GetIPConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.GetIPConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.network.IPConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional IPConfig config = 1;
 * @return {?proto.network.IPConfig}
 */
proto.network.GetIPConfigResponse.prototype.getConfig = function() {
  return /** @type{?proto.network.IPConfig} */ (
    jspb.Message.getWrapperField(this, proto.network.IPConfig, 1));
};


/** @param {?proto.network.IPConfig|undefined} value */
proto.network.GetIPConfigResponse.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.network.GetIPConfigResponse.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.network.GetIPConfigResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.SetIPConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.SetIPConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.SetIPConfigRequest.displayName = 'proto.network.SetIPConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.SetIPConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.network.SetIPConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.SetIPConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetIPConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    config: (f = msg.getConfig()) && proto.network.IPConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.SetIPConfigRequest}
 */
proto.network.SetIPConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.SetIPConfigRequest;
  return proto.network.SetIPConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.SetIPConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.SetIPConfigRequest}
 */
proto.network.SetIPConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = new proto.network.IPConfig;
      reader.readMessage(value,proto.network.IPConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.SetIPConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.SetIPConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.SetIPConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetIPConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.network.IPConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.network.SetIPConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.network.SetIPConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional IPConfig config = 2;
 * @return {?proto.network.IPConfig}
 */
proto.network.SetIPConfigRequest.prototype.getConfig = function() {
  return /** @type{?proto.network.IPConfig} */ (
    jspb.Message.getWrapperField(this, proto.network.IPConfig, 2));
};


/** @param {?proto.network.IPConfig|undefined} value */
proto.network.SetIPConfigRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.network.SetIPConfigRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.network.SetIPConfigRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.SetIPConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.SetIPConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.SetIPConfigResponse.displayName = 'proto.network.SetIPConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.SetIPConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.network.SetIPConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.SetIPConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetIPConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.SetIPConfigResponse}
 */
proto.network.SetIPConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.SetIPConfigResponse;
  return proto.network.SetIPConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.SetIPConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.SetIPConfigResponse}
 */
proto.network.SetIPConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.SetIPConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.SetIPConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.SetIPConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetIPConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.SetIPConfigMultiRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.SetIPConfigMultiRequest.repeatedFields_, null);
};
goog.inherits(proto.network.SetIPConfigMultiRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.SetIPConfigMultiRequest.displayName = 'proto.network.SetIPConfigMultiRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.SetIPConfigMultiRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.SetIPConfigMultiRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.network.SetIPConfigMultiRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.SetIPConfigMultiRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetIPConfigMultiRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceidsList: jspb.Message.getRepeatedField(msg, 1),
    config: (f = msg.getConfig()) && proto.network.IPConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.SetIPConfigMultiRequest}
 */
proto.network.SetIPConfigMultiRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.SetIPConfigMultiRequest;
  return proto.network.SetIPConfigMultiRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.SetIPConfigMultiRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.SetIPConfigMultiRequest}
 */
proto.network.SetIPConfigMultiRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceidsList(value);
      break;
    case 2:
      var value = new proto.network.IPConfig;
      reader.readMessage(value,proto.network.IPConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.SetIPConfigMultiRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.SetIPConfigMultiRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.SetIPConfigMultiRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetIPConfigMultiRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.network.IPConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 deviceIDs = 1;
 * @return {!Array.<number>}
 */
proto.network.SetIPConfigMultiRequest.prototype.getDeviceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.network.SetIPConfigMultiRequest.prototype.setDeviceidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.network.SetIPConfigMultiRequest.prototype.addDeviceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.network.SetIPConfigMultiRequest.prototype.clearDeviceidsList = function() {
  this.setDeviceidsList([]);
};


/**
 * optional IPConfig config = 2;
 * @return {?proto.network.IPConfig}
 */
proto.network.SetIPConfigMultiRequest.prototype.getConfig = function() {
  return /** @type{?proto.network.IPConfig} */ (
    jspb.Message.getWrapperField(this, proto.network.IPConfig, 2));
};


/** @param {?proto.network.IPConfig|undefined} value */
proto.network.SetIPConfigMultiRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.network.SetIPConfigMultiRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.network.SetIPConfigMultiRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.SetIPConfigMultiResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.SetIPConfigMultiResponse.repeatedFields_, null);
};
goog.inherits(proto.network.SetIPConfigMultiResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.SetIPConfigMultiResponse.displayName = 'proto.network.SetIPConfigMultiResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.SetIPConfigMultiResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.SetIPConfigMultiResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.network.SetIPConfigMultiResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.SetIPConfigMultiResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetIPConfigMultiResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceerrorsList: jspb.Message.toObjectList(msg.getDeviceerrorsList(),
    err_pb.ErrorResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.SetIPConfigMultiResponse}
 */
proto.network.SetIPConfigMultiResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.SetIPConfigMultiResponse;
  return proto.network.SetIPConfigMultiResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.SetIPConfigMultiResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.SetIPConfigMultiResponse}
 */
proto.network.SetIPConfigMultiResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new err_pb.ErrorResponse;
      reader.readMessage(value,err_pb.ErrorResponse.deserializeBinaryFromReader);
      msg.addDeviceerrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.SetIPConfigMultiResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.SetIPConfigMultiResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.SetIPConfigMultiResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetIPConfigMultiResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceerrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      err_pb.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated err.ErrorResponse deviceErrors = 1;
 * @return {!Array.<!proto.err.ErrorResponse>}
 */
proto.network.SetIPConfigMultiResponse.prototype.getDeviceerrorsList = function() {
  return /** @type{!Array.<!proto.err.ErrorResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, err_pb.ErrorResponse, 1));
};


/** @param {!Array.<!proto.err.ErrorResponse>} value */
proto.network.SetIPConfigMultiResponse.prototype.setDeviceerrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.err.ErrorResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.err.ErrorResponse}
 */
proto.network.SetIPConfigMultiResponse.prototype.addDeviceerrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.err.ErrorResponse, opt_index);
};


proto.network.SetIPConfigMultiResponse.prototype.clearDeviceerrorsList = function() {
  this.setDeviceerrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.IPConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.IPConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.IPConfig.displayName = 'proto.network.IPConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.IPConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.network.IPConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.IPConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.IPConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    usedhcp: jspb.Message.getFieldWithDefault(msg, 1, false),
    ipaddr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gateway: jspb.Message.getFieldWithDefault(msg, 3, ""),
    subnetmask: jspb.Message.getFieldWithDefault(msg, 4, ""),
    port: jspb.Message.getFieldWithDefault(msg, 5, 0),
    connectionmode: jspb.Message.getFieldWithDefault(msg, 6, 0),
    serveraddr: jspb.Message.getFieldWithDefault(msg, 7, ""),
    serverport: jspb.Message.getFieldWithDefault(msg, 8, 0),
    sslserverport: jspb.Message.getFieldWithDefault(msg, 9, 0),
    usedns: jspb.Message.getFieldWithDefault(msg, 10, false),
    dnsserver: jspb.Message.getFieldWithDefault(msg, 11, ""),
    serverurl: jspb.Message.getFieldWithDefault(msg, 12, ""),
    mtusize: jspb.Message.getFieldWithDefault(msg, 13, 0),
    baseband: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.IPConfig}
 */
proto.network.IPConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.IPConfig;
  return proto.network.IPConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.IPConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.IPConfig}
 */
proto.network.IPConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsedhcp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpaddr(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGateway(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubnetmask(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 6:
      var value = /** @type {!proto.connect.ConnectionMode} */ (reader.readEnum());
      msg.setConnectionmode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setServeraddr(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerport(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSslserverport(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsedns(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDnsserver(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerurl(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMtusize(value);
      break;
    case 14:
      var value = /** @type {!proto.network.EthernetBaseband} */ (reader.readEnum());
      msg.setBaseband(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.IPConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.IPConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.IPConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.IPConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsedhcp();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIpaddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGateway();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubnetmask();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getConnectionmode();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getServeraddr();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getServerport();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getSslserverport();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getUsedns();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getDnsserver();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getServerurl();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getMtusize();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getBaseband();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
};


/**
 * optional bool useDHCP = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.network.IPConfig.prototype.getUsedhcp = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.network.IPConfig.prototype.setUsedhcp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string IPAddr = 2;
 * @return {string}
 */
proto.network.IPConfig.prototype.getIpaddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.network.IPConfig.prototype.setIpaddr = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string gateway = 3;
 * @return {string}
 */
proto.network.IPConfig.prototype.getGateway = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.network.IPConfig.prototype.setGateway = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string subnetMask = 4;
 * @return {string}
 */
proto.network.IPConfig.prototype.getSubnetmask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.network.IPConfig.prototype.setSubnetmask = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 port = 5;
 * @return {number}
 */
proto.network.IPConfig.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.network.IPConfig.prototype.setPort = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional connect.ConnectionMode connectionMode = 6;
 * @return {!proto.connect.ConnectionMode}
 */
proto.network.IPConfig.prototype.getConnectionmode = function() {
  return /** @type {!proto.connect.ConnectionMode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.connect.ConnectionMode} value */
proto.network.IPConfig.prototype.setConnectionmode = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string serverAddr = 7;
 * @return {string}
 */
proto.network.IPConfig.prototype.getServeraddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.network.IPConfig.prototype.setServeraddr = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 serverPort = 8;
 * @return {number}
 */
proto.network.IPConfig.prototype.getServerport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.network.IPConfig.prototype.setServerport = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 SSLServerPort = 9;
 * @return {number}
 */
proto.network.IPConfig.prototype.getSslserverport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.network.IPConfig.prototype.setSslserverport = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bool useDNS = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.network.IPConfig.prototype.getUsedns = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.network.IPConfig.prototype.setUsedns = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string DNSServer = 11;
 * @return {string}
 */
proto.network.IPConfig.prototype.getDnsserver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.network.IPConfig.prototype.setDnsserver = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string serverURL = 12;
 * @return {string}
 */
proto.network.IPConfig.prototype.getServerurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.network.IPConfig.prototype.setServerurl = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int32 MTUSize = 13;
 * @return {number}
 */
proto.network.IPConfig.prototype.getMtusize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.network.IPConfig.prototype.setMtusize = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional EthernetBaseband baseband = 14;
 * @return {!proto.network.EthernetBaseband}
 */
proto.network.IPConfig.prototype.getBaseband = function() {
  return /** @type {!proto.network.EthernetBaseband} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {!proto.network.EthernetBaseband} value */
proto.network.IPConfig.prototype.setBaseband = function(value) {
  jspb.Message.setField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.GetWLANConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.GetWLANConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.GetWLANConfigRequest.displayName = 'proto.network.GetWLANConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.GetWLANConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.network.GetWLANConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.GetWLANConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.GetWLANConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.GetWLANConfigRequest}
 */
proto.network.GetWLANConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.GetWLANConfigRequest;
  return proto.network.GetWLANConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.GetWLANConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.GetWLANConfigRequest}
 */
proto.network.GetWLANConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.GetWLANConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.GetWLANConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.GetWLANConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.GetWLANConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.network.GetWLANConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.network.GetWLANConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.GetWLANConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.GetWLANConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.GetWLANConfigResponse.displayName = 'proto.network.GetWLANConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.GetWLANConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.network.GetWLANConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.GetWLANConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.GetWLANConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.network.WLANConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.GetWLANConfigResponse}
 */
proto.network.GetWLANConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.GetWLANConfigResponse;
  return proto.network.GetWLANConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.GetWLANConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.GetWLANConfigResponse}
 */
proto.network.GetWLANConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.network.WLANConfig;
      reader.readMessage(value,proto.network.WLANConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.GetWLANConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.GetWLANConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.GetWLANConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.GetWLANConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.network.WLANConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional WLANConfig config = 1;
 * @return {?proto.network.WLANConfig}
 */
proto.network.GetWLANConfigResponse.prototype.getConfig = function() {
  return /** @type{?proto.network.WLANConfig} */ (
    jspb.Message.getWrapperField(this, proto.network.WLANConfig, 1));
};


/** @param {?proto.network.WLANConfig|undefined} value */
proto.network.GetWLANConfigResponse.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.network.GetWLANConfigResponse.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.network.GetWLANConfigResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.SetWLANConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.SetWLANConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.SetWLANConfigRequest.displayName = 'proto.network.SetWLANConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.SetWLANConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.network.SetWLANConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.SetWLANConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetWLANConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    config: (f = msg.getConfig()) && proto.network.WLANConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.SetWLANConfigRequest}
 */
proto.network.SetWLANConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.SetWLANConfigRequest;
  return proto.network.SetWLANConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.SetWLANConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.SetWLANConfigRequest}
 */
proto.network.SetWLANConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = new proto.network.WLANConfig;
      reader.readMessage(value,proto.network.WLANConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.SetWLANConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.SetWLANConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.SetWLANConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetWLANConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.network.WLANConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.network.SetWLANConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.network.SetWLANConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional WLANConfig config = 2;
 * @return {?proto.network.WLANConfig}
 */
proto.network.SetWLANConfigRequest.prototype.getConfig = function() {
  return /** @type{?proto.network.WLANConfig} */ (
    jspb.Message.getWrapperField(this, proto.network.WLANConfig, 2));
};


/** @param {?proto.network.WLANConfig|undefined} value */
proto.network.SetWLANConfigRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.network.SetWLANConfigRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.network.SetWLANConfigRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.SetWLANConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.SetWLANConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.SetWLANConfigResponse.displayName = 'proto.network.SetWLANConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.SetWLANConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.network.SetWLANConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.SetWLANConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetWLANConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.SetWLANConfigResponse}
 */
proto.network.SetWLANConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.SetWLANConfigResponse;
  return proto.network.SetWLANConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.SetWLANConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.SetWLANConfigResponse}
 */
proto.network.SetWLANConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.SetWLANConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.SetWLANConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.SetWLANConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetWLANConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.SetWLANConfigMultiRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.SetWLANConfigMultiRequest.repeatedFields_, null);
};
goog.inherits(proto.network.SetWLANConfigMultiRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.SetWLANConfigMultiRequest.displayName = 'proto.network.SetWLANConfigMultiRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.SetWLANConfigMultiRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.SetWLANConfigMultiRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.network.SetWLANConfigMultiRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.SetWLANConfigMultiRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetWLANConfigMultiRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceidsList: jspb.Message.getRepeatedField(msg, 1),
    config: (f = msg.getConfig()) && proto.network.WLANConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.SetWLANConfigMultiRequest}
 */
proto.network.SetWLANConfigMultiRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.SetWLANConfigMultiRequest;
  return proto.network.SetWLANConfigMultiRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.SetWLANConfigMultiRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.SetWLANConfigMultiRequest}
 */
proto.network.SetWLANConfigMultiRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceidsList(value);
      break;
    case 2:
      var value = new proto.network.WLANConfig;
      reader.readMessage(value,proto.network.WLANConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.SetWLANConfigMultiRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.SetWLANConfigMultiRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.SetWLANConfigMultiRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetWLANConfigMultiRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.network.WLANConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 deviceIDs = 1;
 * @return {!Array.<number>}
 */
proto.network.SetWLANConfigMultiRequest.prototype.getDeviceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.network.SetWLANConfigMultiRequest.prototype.setDeviceidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.network.SetWLANConfigMultiRequest.prototype.addDeviceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.network.SetWLANConfigMultiRequest.prototype.clearDeviceidsList = function() {
  this.setDeviceidsList([]);
};


/**
 * optional WLANConfig config = 2;
 * @return {?proto.network.WLANConfig}
 */
proto.network.SetWLANConfigMultiRequest.prototype.getConfig = function() {
  return /** @type{?proto.network.WLANConfig} */ (
    jspb.Message.getWrapperField(this, proto.network.WLANConfig, 2));
};


/** @param {?proto.network.WLANConfig|undefined} value */
proto.network.SetWLANConfigMultiRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.network.SetWLANConfigMultiRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.network.SetWLANConfigMultiRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.SetWLANConfigMultiResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.SetWLANConfigMultiResponse.repeatedFields_, null);
};
goog.inherits(proto.network.SetWLANConfigMultiResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.SetWLANConfigMultiResponse.displayName = 'proto.network.SetWLANConfigMultiResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.SetWLANConfigMultiResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.SetWLANConfigMultiResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.network.SetWLANConfigMultiResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.SetWLANConfigMultiResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetWLANConfigMultiResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceerrorsList: jspb.Message.toObjectList(msg.getDeviceerrorsList(),
    err_pb.ErrorResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.SetWLANConfigMultiResponse}
 */
proto.network.SetWLANConfigMultiResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.SetWLANConfigMultiResponse;
  return proto.network.SetWLANConfigMultiResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.SetWLANConfigMultiResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.SetWLANConfigMultiResponse}
 */
proto.network.SetWLANConfigMultiResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new err_pb.ErrorResponse;
      reader.readMessage(value,err_pb.ErrorResponse.deserializeBinaryFromReader);
      msg.addDeviceerrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.SetWLANConfigMultiResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.SetWLANConfigMultiResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.SetWLANConfigMultiResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SetWLANConfigMultiResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceerrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      err_pb.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated err.ErrorResponse deviceErrors = 1;
 * @return {!Array.<!proto.err.ErrorResponse>}
 */
proto.network.SetWLANConfigMultiResponse.prototype.getDeviceerrorsList = function() {
  return /** @type{!Array.<!proto.err.ErrorResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, err_pb.ErrorResponse, 1));
};


/** @param {!Array.<!proto.err.ErrorResponse>} value */
proto.network.SetWLANConfigMultiResponse.prototype.setDeviceerrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.err.ErrorResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.err.ErrorResponse}
 */
proto.network.SetWLANConfigMultiResponse.prototype.addDeviceerrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.err.ErrorResponse, opt_index);
};


proto.network.SetWLANConfigMultiResponse.prototype.clearDeviceerrorsList = function() {
  this.setDeviceerrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.WLANConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.WLANConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.WLANConfig.displayName = 'proto.network.WLANConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.WLANConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.network.WLANConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.WLANConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.WLANConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getFieldWithDefault(msg, 1, false),
    opmode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    authtype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    enctype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    essid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    authkey: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.WLANConfig}
 */
proto.network.WLANConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.WLANConfig;
  return proto.network.WLANConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.WLANConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.WLANConfig}
 */
proto.network.WLANConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {!proto.network.WLANOperationMode} */ (reader.readEnum());
      msg.setOpmode(value);
      break;
    case 3:
      var value = /** @type {!proto.network.WLANAuthType} */ (reader.readEnum());
      msg.setAuthtype(value);
      break;
    case 4:
      var value = /** @type {!proto.network.WLANEncryptionType} */ (reader.readEnum());
      msg.setEnctype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEssid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.WLANConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.WLANConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.WLANConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.WLANConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getOpmode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAuthtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getEnctype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getEssid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAuthkey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.network.WLANConfig.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.network.WLANConfig.prototype.setEnabled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional WLANOperationMode opMode = 2;
 * @return {!proto.network.WLANOperationMode}
 */
proto.network.WLANConfig.prototype.getOpmode = function() {
  return /** @type {!proto.network.WLANOperationMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.network.WLANOperationMode} value */
proto.network.WLANConfig.prototype.setOpmode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional WLANAuthType authType = 3;
 * @return {!proto.network.WLANAuthType}
 */
proto.network.WLANConfig.prototype.getAuthtype = function() {
  return /** @type {!proto.network.WLANAuthType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.network.WLANAuthType} value */
proto.network.WLANConfig.prototype.setAuthtype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional WLANEncryptionType encType = 4;
 * @return {!proto.network.WLANEncryptionType}
 */
proto.network.WLANConfig.prototype.getEnctype = function() {
  return /** @type {!proto.network.WLANEncryptionType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.network.WLANEncryptionType} value */
proto.network.WLANConfig.prototype.setEnctype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string ESSID = 5;
 * @return {string}
 */
proto.network.WLANConfig.prototype.getEssid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.network.WLANConfig.prototype.setEssid = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string authKey = 6;
 * @return {string}
 */
proto.network.WLANConfig.prototype.getAuthkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.network.WLANConfig.prototype.setAuthkey = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.network.EthernetBaseband = {
  BASEBAND_10BASE_T: 0,
  BASEBAND_100BASE_T: 1
};

/**
 * @enum {number}
 */
proto.network.WLANOperationMode = {
  WLAN_OPMODE_MANAGED: 0,
  WLAN_OPMODE_ADHOC: 1
};

/**
 * @enum {number}
 */
proto.network.WLANAuthType = {
  WLAN_AUTH_OPEN: 0,
  WLAN_AUTH_SHARED: 1,
  WLAN_AUTH_WPA_PSK: 2,
  WLAN_AUTH_WPA2_PSK: 3
};

/**
 * @enum {number}
 */
proto.network.WLANEncryptionType = {
  WLAN_ENC_NONE: 0,
  BS2_WLAN_ENC_WEP: 1,
  BS2_WLAN_ENC_TKIP_AES: 2,
  BS2_WLAN_ENC_AES: 3,
  BS2_WLAN_ENC_TKIP: 4
};

goog.object.extend(exports, proto.network);
