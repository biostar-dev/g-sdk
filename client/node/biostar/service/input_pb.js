/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var err_pb = require('./err_pb.js');
goog.exportSymbol('proto.input.GetConfigRequest', null, global);
goog.exportSymbol('proto.input.GetConfigResponse', null, global);
goog.exportSymbol('proto.input.InputConfig', null, global);
goog.exportSymbol('proto.input.SetConfigMultiRequest', null, global);
goog.exportSymbol('proto.input.SetConfigMultiResponse', null, global);
goog.exportSymbol('proto.input.SetConfigRequest', null, global);
goog.exportSymbol('proto.input.SetConfigResponse', null, global);
goog.exportSymbol('proto.input.SupervisedInput', null, global);
goog.exportSymbol('proto.input.SupervisedInputConfig', null, global);
goog.exportSymbol('proto.input.SupervisedInputRange', null, global);
goog.exportSymbol('proto.input.SupervisedRegistanceValue', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.input.SupervisedInputRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.input.SupervisedInputRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.input.SupervisedInputRange.displayName = 'proto.input.SupervisedInputRange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.input.SupervisedInputRange.prototype.toObject = function(opt_includeInstance) {
  return proto.input.SupervisedInputRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.input.SupervisedInputRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SupervisedInputRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    minvalue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxvalue: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.input.SupervisedInputRange}
 */
proto.input.SupervisedInputRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.input.SupervisedInputRange;
  return proto.input.SupervisedInputRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.input.SupervisedInputRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.input.SupervisedInputRange}
 */
proto.input.SupervisedInputRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinvalue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.input.SupervisedInputRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.input.SupervisedInputRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.input.SupervisedInputRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SupervisedInputRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinvalue();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMaxvalue();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 MinValue = 1;
 * @return {number}
 */
proto.input.SupervisedInputRange.prototype.getMinvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.input.SupervisedInputRange.prototype.setMinvalue = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 MaxValue = 2;
 * @return {number}
 */
proto.input.SupervisedInputRange.prototype.getMaxvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.input.SupervisedInputRange.prototype.setMaxvalue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.input.SupervisedInputConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.input.SupervisedInputConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.input.SupervisedInputConfig.displayName = 'proto.input.SupervisedInputConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.input.SupervisedInputConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.input.SupervisedInputConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.input.SupervisedInputConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SupervisedInputConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_short: (f = msg.getShort()) && proto.input.SupervisedInputRange.toObject(includeInstance, f),
    open: (f = msg.getOpen()) && proto.input.SupervisedInputRange.toObject(includeInstance, f),
    on: (f = msg.getOn()) && proto.input.SupervisedInputRange.toObject(includeInstance, f),
    off: (f = msg.getOff()) && proto.input.SupervisedInputRange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.input.SupervisedInputConfig}
 */
proto.input.SupervisedInputConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.input.SupervisedInputConfig;
  return proto.input.SupervisedInputConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.input.SupervisedInputConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.input.SupervisedInputConfig}
 */
proto.input.SupervisedInputConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.input.SupervisedInputRange;
      reader.readMessage(value,proto.input.SupervisedInputRange.deserializeBinaryFromReader);
      msg.setShort(value);
      break;
    case 2:
      var value = new proto.input.SupervisedInputRange;
      reader.readMessage(value,proto.input.SupervisedInputRange.deserializeBinaryFromReader);
      msg.setOpen(value);
      break;
    case 3:
      var value = new proto.input.SupervisedInputRange;
      reader.readMessage(value,proto.input.SupervisedInputRange.deserializeBinaryFromReader);
      msg.setOn(value);
      break;
    case 4:
      var value = new proto.input.SupervisedInputRange;
      reader.readMessage(value,proto.input.SupervisedInputRange.deserializeBinaryFromReader);
      msg.setOff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.input.SupervisedInputConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.input.SupervisedInputConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.input.SupervisedInputConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SupervisedInputConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShort();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.input.SupervisedInputRange.serializeBinaryToWriter
    );
  }
  f = message.getOpen();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.input.SupervisedInputRange.serializeBinaryToWriter
    );
  }
  f = message.getOn();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.input.SupervisedInputRange.serializeBinaryToWriter
    );
  }
  f = message.getOff();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.input.SupervisedInputRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional SupervisedInputRange short = 1;
 * @return {?proto.input.SupervisedInputRange}
 */
proto.input.SupervisedInputConfig.prototype.getShort = function() {
  return /** @type{?proto.input.SupervisedInputRange} */ (
    jspb.Message.getWrapperField(this, proto.input.SupervisedInputRange, 1));
};


/** @param {?proto.input.SupervisedInputRange|undefined} value */
proto.input.SupervisedInputConfig.prototype.setShort = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.input.SupervisedInputConfig.prototype.clearShort = function() {
  this.setShort(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.input.SupervisedInputConfig.prototype.hasShort = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SupervisedInputRange open = 2;
 * @return {?proto.input.SupervisedInputRange}
 */
proto.input.SupervisedInputConfig.prototype.getOpen = function() {
  return /** @type{?proto.input.SupervisedInputRange} */ (
    jspb.Message.getWrapperField(this, proto.input.SupervisedInputRange, 2));
};


/** @param {?proto.input.SupervisedInputRange|undefined} value */
proto.input.SupervisedInputConfig.prototype.setOpen = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.input.SupervisedInputConfig.prototype.clearOpen = function() {
  this.setOpen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.input.SupervisedInputConfig.prototype.hasOpen = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SupervisedInputRange on = 3;
 * @return {?proto.input.SupervisedInputRange}
 */
proto.input.SupervisedInputConfig.prototype.getOn = function() {
  return /** @type{?proto.input.SupervisedInputRange} */ (
    jspb.Message.getWrapperField(this, proto.input.SupervisedInputRange, 3));
};


/** @param {?proto.input.SupervisedInputRange|undefined} value */
proto.input.SupervisedInputConfig.prototype.setOn = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.input.SupervisedInputConfig.prototype.clearOn = function() {
  this.setOn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.input.SupervisedInputConfig.prototype.hasOn = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SupervisedInputRange off = 4;
 * @return {?proto.input.SupervisedInputRange}
 */
proto.input.SupervisedInputConfig.prototype.getOff = function() {
  return /** @type{?proto.input.SupervisedInputRange} */ (
    jspb.Message.getWrapperField(this, proto.input.SupervisedInputRange, 4));
};


/** @param {?proto.input.SupervisedInputRange|undefined} value */
proto.input.SupervisedInputConfig.prototype.setOff = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.input.SupervisedInputConfig.prototype.clearOff = function() {
  this.setOff(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.input.SupervisedInputConfig.prototype.hasOff = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.input.SupervisedInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.input.SupervisedInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.input.SupervisedInput.displayName = 'proto.input.SupervisedInput';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.input.SupervisedInput.prototype.toObject = function(opt_includeInstance) {
  return proto.input.SupervisedInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.input.SupervisedInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SupervisedInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    portindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    registance: jspb.Message.getFieldWithDefault(msg, 3, 0),
    config: (f = msg.getConfig()) && proto.input.SupervisedInputConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.input.SupervisedInput}
 */
proto.input.SupervisedInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.input.SupervisedInput;
  return proto.input.SupervisedInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.input.SupervisedInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.input.SupervisedInput}
 */
proto.input.SupervisedInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPortindex(value);
      break;
    case 3:
      var value = /** @type {!proto.input.SupervisedRegistanceValue} */ (reader.readEnum());
      msg.setRegistance(value);
      break;
    case 4:
      var value = new proto.input.SupervisedInputConfig;
      reader.readMessage(value,proto.input.SupervisedInputConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.input.SupervisedInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.input.SupervisedInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.input.SupervisedInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SupervisedInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRegistance();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.input.SupervisedInputConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 portIndex = 1;
 * @return {number}
 */
proto.input.SupervisedInput.prototype.getPortindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.input.SupervisedInput.prototype.setPortindex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional SupervisedRegistanceValue registance = 3;
 * @return {!proto.input.SupervisedRegistanceValue}
 */
proto.input.SupervisedInput.prototype.getRegistance = function() {
  return /** @type {!proto.input.SupervisedRegistanceValue} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.input.SupervisedRegistanceValue} value */
proto.input.SupervisedInput.prototype.setRegistance = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional SupervisedInputConfig config = 4;
 * @return {?proto.input.SupervisedInputConfig}
 */
proto.input.SupervisedInput.prototype.getConfig = function() {
  return /** @type{?proto.input.SupervisedInputConfig} */ (
    jspb.Message.getWrapperField(this, proto.input.SupervisedInputConfig, 4));
};


/** @param {?proto.input.SupervisedInputConfig|undefined} value */
proto.input.SupervisedInput.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.input.SupervisedInput.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.input.SupervisedInput.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.input.InputConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.input.InputConfig.repeatedFields_, null);
};
goog.inherits(proto.input.InputConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.input.InputConfig.displayName = 'proto.input.InputConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.input.InputConfig.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.input.InputConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.input.InputConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.input.InputConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.InputConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    numofinput: jspb.Message.getFieldWithDefault(msg, 1, 0),
    numofsupervisedinput: jspb.Message.getFieldWithDefault(msg, 2, 0),
    supervisedinputsList: jspb.Message.toObjectList(msg.getSupervisedinputsList(),
    proto.input.SupervisedInput.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.input.InputConfig}
 */
proto.input.InputConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.input.InputConfig;
  return proto.input.InputConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.input.InputConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.input.InputConfig}
 */
proto.input.InputConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumofinput(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumofsupervisedinput(value);
      break;
    case 3:
      var value = new proto.input.SupervisedInput;
      reader.readMessage(value,proto.input.SupervisedInput.deserializeBinaryFromReader);
      msg.addSupervisedinputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.input.InputConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.input.InputConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.input.InputConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.InputConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumofinput();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNumofsupervisedinput();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSupervisedinputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.input.SupervisedInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 numOfInput = 1;
 * @return {number}
 */
proto.input.InputConfig.prototype.getNumofinput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.input.InputConfig.prototype.setNumofinput = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 numOfSupervisedInput = 2;
 * @return {number}
 */
proto.input.InputConfig.prototype.getNumofsupervisedinput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.input.InputConfig.prototype.setNumofsupervisedinput = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated SupervisedInput supervisedInputs = 3;
 * @return {!Array.<!proto.input.SupervisedInput>}
 */
proto.input.InputConfig.prototype.getSupervisedinputsList = function() {
  return /** @type{!Array.<!proto.input.SupervisedInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.input.SupervisedInput, 3));
};


/** @param {!Array.<!proto.input.SupervisedInput>} value */
proto.input.InputConfig.prototype.setSupervisedinputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.input.SupervisedInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.input.SupervisedInput}
 */
proto.input.InputConfig.prototype.addSupervisedinputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.input.SupervisedInput, opt_index);
};


proto.input.InputConfig.prototype.clearSupervisedinputsList = function() {
  this.setSupervisedinputsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.input.GetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.input.GetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.input.GetConfigRequest.displayName = 'proto.input.GetConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.input.GetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.input.GetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.input.GetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.GetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.input.GetConfigRequest}
 */
proto.input.GetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.input.GetConfigRequest;
  return proto.input.GetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.input.GetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.input.GetConfigRequest}
 */
proto.input.GetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.input.GetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.input.GetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.input.GetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.GetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.input.GetConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.input.GetConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.input.GetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.input.GetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.input.GetConfigResponse.displayName = 'proto.input.GetConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.input.GetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.input.GetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.input.GetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.GetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.input.InputConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.input.GetConfigResponse}
 */
proto.input.GetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.input.GetConfigResponse;
  return proto.input.GetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.input.GetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.input.GetConfigResponse}
 */
proto.input.GetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.input.InputConfig;
      reader.readMessage(value,proto.input.InputConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.input.GetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.input.GetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.input.GetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.GetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.input.InputConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional InputConfig config = 1;
 * @return {?proto.input.InputConfig}
 */
proto.input.GetConfigResponse.prototype.getConfig = function() {
  return /** @type{?proto.input.InputConfig} */ (
    jspb.Message.getWrapperField(this, proto.input.InputConfig, 1));
};


/** @param {?proto.input.InputConfig|undefined} value */
proto.input.GetConfigResponse.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.input.GetConfigResponse.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.input.GetConfigResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.input.SetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.input.SetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.input.SetConfigRequest.displayName = 'proto.input.SetConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.input.SetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.input.SetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.input.SetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    config: (f = msg.getConfig()) && proto.input.InputConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.input.SetConfigRequest}
 */
proto.input.SetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.input.SetConfigRequest;
  return proto.input.SetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.input.SetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.input.SetConfigRequest}
 */
proto.input.SetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = new proto.input.InputConfig;
      reader.readMessage(value,proto.input.InputConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.input.SetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.input.SetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.input.SetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.input.InputConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.input.SetConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.input.SetConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional InputConfig config = 2;
 * @return {?proto.input.InputConfig}
 */
proto.input.SetConfigRequest.prototype.getConfig = function() {
  return /** @type{?proto.input.InputConfig} */ (
    jspb.Message.getWrapperField(this, proto.input.InputConfig, 2));
};


/** @param {?proto.input.InputConfig|undefined} value */
proto.input.SetConfigRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.input.SetConfigRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.input.SetConfigRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.input.SetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.input.SetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.input.SetConfigResponse.displayName = 'proto.input.SetConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.input.SetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.input.SetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.input.SetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.input.SetConfigResponse}
 */
proto.input.SetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.input.SetConfigResponse;
  return proto.input.SetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.input.SetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.input.SetConfigResponse}
 */
proto.input.SetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.input.SetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.input.SetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.input.SetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.input.SetConfigMultiRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.input.SetConfigMultiRequest.repeatedFields_, null);
};
goog.inherits(proto.input.SetConfigMultiRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.input.SetConfigMultiRequest.displayName = 'proto.input.SetConfigMultiRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.input.SetConfigMultiRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.input.SetConfigMultiRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.input.SetConfigMultiRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.input.SetConfigMultiRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SetConfigMultiRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceidsList: jspb.Message.getRepeatedField(msg, 1),
    config: (f = msg.getConfig()) && proto.input.InputConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.input.SetConfigMultiRequest}
 */
proto.input.SetConfigMultiRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.input.SetConfigMultiRequest;
  return proto.input.SetConfigMultiRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.input.SetConfigMultiRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.input.SetConfigMultiRequest}
 */
proto.input.SetConfigMultiRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceidsList(value);
      break;
    case 2:
      var value = new proto.input.InputConfig;
      reader.readMessage(value,proto.input.InputConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.input.SetConfigMultiRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.input.SetConfigMultiRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.input.SetConfigMultiRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SetConfigMultiRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.input.InputConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 deviceIDs = 1;
 * @return {!Array.<number>}
 */
proto.input.SetConfigMultiRequest.prototype.getDeviceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.input.SetConfigMultiRequest.prototype.setDeviceidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.input.SetConfigMultiRequest.prototype.addDeviceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.input.SetConfigMultiRequest.prototype.clearDeviceidsList = function() {
  this.setDeviceidsList([]);
};


/**
 * optional InputConfig config = 2;
 * @return {?proto.input.InputConfig}
 */
proto.input.SetConfigMultiRequest.prototype.getConfig = function() {
  return /** @type{?proto.input.InputConfig} */ (
    jspb.Message.getWrapperField(this, proto.input.InputConfig, 2));
};


/** @param {?proto.input.InputConfig|undefined} value */
proto.input.SetConfigMultiRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.input.SetConfigMultiRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.input.SetConfigMultiRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.input.SetConfigMultiResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.input.SetConfigMultiResponse.repeatedFields_, null);
};
goog.inherits(proto.input.SetConfigMultiResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.input.SetConfigMultiResponse.displayName = 'proto.input.SetConfigMultiResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.input.SetConfigMultiResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.input.SetConfigMultiResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.input.SetConfigMultiResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.input.SetConfigMultiResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SetConfigMultiResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceerrorsList: jspb.Message.toObjectList(msg.getDeviceerrorsList(),
    err_pb.ErrorResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.input.SetConfigMultiResponse}
 */
proto.input.SetConfigMultiResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.input.SetConfigMultiResponse;
  return proto.input.SetConfigMultiResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.input.SetConfigMultiResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.input.SetConfigMultiResponse}
 */
proto.input.SetConfigMultiResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new err_pb.ErrorResponse;
      reader.readMessage(value,err_pb.ErrorResponse.deserializeBinaryFromReader);
      msg.addDeviceerrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.input.SetConfigMultiResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.input.SetConfigMultiResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.input.SetConfigMultiResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.input.SetConfigMultiResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceerrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      err_pb.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated err.ErrorResponse deviceErrors = 1;
 * @return {!Array.<!proto.err.ErrorResponse>}
 */
proto.input.SetConfigMultiResponse.prototype.getDeviceerrorsList = function() {
  return /** @type{!Array.<!proto.err.ErrorResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, err_pb.ErrorResponse, 1));
};


/** @param {!Array.<!proto.err.ErrorResponse>} value */
proto.input.SetConfigMultiResponse.prototype.setDeviceerrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.err.ErrorResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.err.ErrorResponse}
 */
proto.input.SetConfigMultiResponse.prototype.addDeviceerrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.err.ErrorResponse, opt_index);
};


proto.input.SetConfigMultiResponse.prototype.clearDeviceerrorsList = function() {
  this.setDeviceerrorsList([]);
};


/**
 * @enum {number}
 */
proto.input.SupervisedRegistanceValue = {
  SUPERVISED_REG_1K: 0,
  SUPERVISED_REG_2_2K: 1,
  SUPERVISED_REG_4_7K: 2,
  SUPERVISED_REG_10K: 3,
  SUPERVISED_REG_CUSTOM: 255
};

goog.object.extend(exports, proto.input);
