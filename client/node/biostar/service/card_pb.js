/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var err_pb = require('./err_pb.js');
goog.exportSymbol('proto.card.AccessOnCardData', null, global);
goog.exportSymbol('proto.card.AddBlacklistMultiRequest', null, global);
goog.exportSymbol('proto.card.AddBlacklistMultiResponse', null, global);
goog.exportSymbol('proto.card.AddBlacklistRequest', null, global);
goog.exportSymbol('proto.card.AddBlacklistResponse', null, global);
goog.exportSymbol('proto.card.BlacklistItem', null, global);
goog.exportSymbol('proto.card.CSNCardData', null, global);
goog.exportSymbol('proto.card.Card1XConfig', null, global);
goog.exportSymbol('proto.card.CardByteOrder', null, global);
goog.exportSymbol('proto.card.CardConfig', null, global);
goog.exportSymbol('proto.card.CardData', null, global);
goog.exportSymbol('proto.card.CardDataType', null, global);
goog.exportSymbol('proto.card.DESFireConfig', null, global);
goog.exportSymbol('proto.card.DESFireEncryptionType', null, global);
goog.exportSymbol('proto.card.DeleteAllBlacklistMultiRequest', null, global);
goog.exportSymbol('proto.card.DeleteAllBlacklistMultiResponse', null, global);
goog.exportSymbol('proto.card.DeleteAllBlacklistRequest', null, global);
goog.exportSymbol('proto.card.DeleteAllBlacklistResponse', null, global);
goog.exportSymbol('proto.card.DeleteBlacklistMultiRequest', null, global);
goog.exportSymbol('proto.card.DeleteBlacklistMultiResponse', null, global);
goog.exportSymbol('proto.card.DeleteBlacklistRequest', null, global);
goog.exportSymbol('proto.card.DeleteBlacklistResponse', null, global);
goog.exportSymbol('proto.card.EraseRequest', null, global);
goog.exportSymbol('proto.card.EraseResponse', null, global);
goog.exportSymbol('proto.card.Get1XConfigRequest', null, global);
goog.exportSymbol('proto.card.Get1XConfigResponse', null, global);
goog.exportSymbol('proto.card.GetBlacklistRequest', null, global);
goog.exportSymbol('proto.card.GetBlacklistResponse', null, global);
goog.exportSymbol('proto.card.GetConfigRequest', null, global);
goog.exportSymbol('proto.card.GetConfigResponse', null, global);
goog.exportSymbol('proto.card.IClassConfig', null, global);
goog.exportSymbol('proto.card.MifareConfig', null, global);
goog.exportSymbol('proto.card.SEOSConfig', null, global);
goog.exportSymbol('proto.card.ScanRequest', null, global);
goog.exportSymbol('proto.card.ScanResponse', null, global);
goog.exportSymbol('proto.card.Set1XConfigMultiRequest', null, global);
goog.exportSymbol('proto.card.Set1XConfigMultiResponse', null, global);
goog.exportSymbol('proto.card.Set1XConfigRequest', null, global);
goog.exportSymbol('proto.card.Set1XConfigResponse', null, global);
goog.exportSymbol('proto.card.SetConfigMultiRequest', null, global);
goog.exportSymbol('proto.card.SetConfigMultiResponse', null, global);
goog.exportSymbol('proto.card.SetConfigRequest', null, global);
goog.exportSymbol('proto.card.SetConfigResponse', null, global);
goog.exportSymbol('proto.card.SmartCardCredential', null, global);
goog.exportSymbol('proto.card.SmartCardData', null, global);
goog.exportSymbol('proto.card.SmartCardHeader', null, global);
goog.exportSymbol('proto.card.Type', null, global);
goog.exportSymbol('proto.card.WriteRequest', null, global);
goog.exportSymbol('proto.card.WriteResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.CSNCardData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.CSNCardData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.CSNCardData.displayName = 'proto.card.CSNCardData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.CSNCardData.prototype.toObject = function(opt_includeInstance) {
  return proto.card.CSNCardData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.CSNCardData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.CSNCardData.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.CSNCardData}
 */
proto.card.CSNCardData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.CSNCardData;
  return proto.card.CSNCardData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.CSNCardData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.CSNCardData}
 */
proto.card.CSNCardData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.card.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.CSNCardData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.CSNCardData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.CSNCardData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.CSNCardData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional Type type = 1;
 * @return {!proto.card.Type}
 */
proto.card.CSNCardData.prototype.getType = function() {
  return /** @type {!proto.card.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.card.Type} value */
proto.card.CSNCardData.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 size = 2;
 * @return {number}
 */
proto.card.CSNCardData.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.card.CSNCardData.prototype.setSize = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.card.CSNCardData.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.card.CSNCardData.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.card.CSNCardData.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.CSNCardData.prototype.setData = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.SmartCardHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.SmartCardHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.SmartCardHeader.displayName = 'proto.card.SmartCardHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.SmartCardHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.card.SmartCardHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.SmartCardHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SmartCardHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    headercrc: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardcrc: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numoftemplate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    templatesize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    issuecount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    duressmask: jspb.Message.getFieldWithDefault(msg, 7, 0),
    cardauthmode: jspb.Message.getFieldWithDefault(msg, 8, 0),
    usealphanumericid: jspb.Message.getFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.SmartCardHeader}
 */
proto.card.SmartCardHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.SmartCardHeader;
  return proto.card.SmartCardHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.SmartCardHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.SmartCardHeader}
 */
proto.card.SmartCardHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeadercrc(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCardcrc(value);
      break;
    case 3:
      var value = /** @type {!proto.card.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumoftemplate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTemplatesize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIssuecount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuressmask(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCardauthmode(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsealphanumericid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.SmartCardHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.SmartCardHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.SmartCardHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SmartCardHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadercrc();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCardcrc();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getNumoftemplate();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTemplatesize();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getIssuecount();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getDuressmask();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getCardauthmode();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getUsealphanumericid();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional uint32 headerCRC = 1;
 * @return {number}
 */
proto.card.SmartCardHeader.prototype.getHeadercrc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.card.SmartCardHeader.prototype.setHeadercrc = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 cardCRC = 2;
 * @return {number}
 */
proto.card.SmartCardHeader.prototype.getCardcrc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.card.SmartCardHeader.prototype.setCardcrc = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Type type = 3;
 * @return {!proto.card.Type}
 */
proto.card.SmartCardHeader.prototype.getType = function() {
  return /** @type {!proto.card.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.card.Type} value */
proto.card.SmartCardHeader.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 numOfTemplate = 4;
 * @return {number}
 */
proto.card.SmartCardHeader.prototype.getNumoftemplate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.card.SmartCardHeader.prototype.setNumoftemplate = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 templateSize = 5;
 * @return {number}
 */
proto.card.SmartCardHeader.prototype.getTemplatesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.card.SmartCardHeader.prototype.setTemplatesize = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 issueCount = 6;
 * @return {number}
 */
proto.card.SmartCardHeader.prototype.getIssuecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.card.SmartCardHeader.prototype.setIssuecount = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 duressMask = 7;
 * @return {number}
 */
proto.card.SmartCardHeader.prototype.getDuressmask = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.card.SmartCardHeader.prototype.setDuressmask = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 cardAuthMode = 8;
 * @return {number}
 */
proto.card.SmartCardHeader.prototype.getCardauthmode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.card.SmartCardHeader.prototype.setCardauthmode = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bool useAlphanumericID = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.card.SmartCardHeader.prototype.getUsealphanumericid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.card.SmartCardHeader.prototype.setUsealphanumericid = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.SmartCardCredential = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.SmartCardCredential.repeatedFields_, null);
};
goog.inherits(proto.card.SmartCardCredential, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.SmartCardCredential.displayName = 'proto.card.SmartCardCredential';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.SmartCardCredential.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.SmartCardCredential.prototype.toObject = function(opt_includeInstance) {
  return proto.card.SmartCardCredential.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.SmartCardCredential} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SmartCardCredential.toObject = function(includeInstance, msg) {
  var f, obj = {
    pin: msg.getPin_asB64(),
    templatesList: msg.getTemplatesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.SmartCardCredential}
 */
proto.card.SmartCardCredential.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.SmartCardCredential;
  return proto.card.SmartCardCredential.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.SmartCardCredential} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.SmartCardCredential}
 */
proto.card.SmartCardCredential.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPin(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTemplates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.SmartCardCredential.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.SmartCardCredential.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.SmartCardCredential} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SmartCardCredential.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPin_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTemplatesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes PIN = 1;
 * @return {!(string|Uint8Array)}
 */
proto.card.SmartCardCredential.prototype.getPin = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes PIN = 1;
 * This is a type-conversion wrapper around `getPin()`
 * @return {string}
 */
proto.card.SmartCardCredential.prototype.getPin_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPin()));
};


/**
 * optional bytes PIN = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPin()`
 * @return {!Uint8Array}
 */
proto.card.SmartCardCredential.prototype.getPin_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPin()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.SmartCardCredential.prototype.setPin = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated bytes templates = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.card.SmartCardCredential.prototype.getTemplatesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes templates = 2;
 * This is a type-conversion wrapper around `getTemplatesList()`
 * @return {!Array.<string>}
 */
proto.card.SmartCardCredential.prototype.getTemplatesList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getTemplatesList()));
};


/**
 * repeated bytes templates = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTemplatesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.card.SmartCardCredential.prototype.getTemplatesList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTemplatesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.card.SmartCardCredential.prototype.setTemplatesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.card.SmartCardCredential.prototype.addTemplates = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.card.SmartCardCredential.prototype.clearTemplatesList = function() {
  this.setTemplatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.AccessOnCardData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.AccessOnCardData.repeatedFields_, null);
};
goog.inherits(proto.card.AccessOnCardData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.AccessOnCardData.displayName = 'proto.card.AccessOnCardData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.AccessOnCardData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.AccessOnCardData.prototype.toObject = function(opt_includeInstance) {
  return proto.card.AccessOnCardData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.AccessOnCardData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.AccessOnCardData.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessgroupidsList: jspb.Message.getRepeatedField(msg, 1),
    starttime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endtime: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.AccessOnCardData}
 */
proto.card.AccessOnCardData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.AccessOnCardData;
  return proto.card.AccessOnCardData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.AccessOnCardData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.AccessOnCardData}
 */
proto.card.AccessOnCardData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setAccessgroupidsList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStarttime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.AccessOnCardData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.AccessOnCardData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.AccessOnCardData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.AccessOnCardData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessgroupidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEndtime();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated uint32 accessGroupIDs = 1;
 * @return {!Array.<number>}
 */
proto.card.AccessOnCardData.prototype.getAccessgroupidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.card.AccessOnCardData.prototype.setAccessgroupidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.card.AccessOnCardData.prototype.addAccessgroupids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.card.AccessOnCardData.prototype.clearAccessgroupidsList = function() {
  this.setAccessgroupidsList([]);
};


/**
 * optional uint32 startTime = 2;
 * @return {number}
 */
proto.card.AccessOnCardData.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.card.AccessOnCardData.prototype.setStarttime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 endTime = 3;
 * @return {number}
 */
proto.card.AccessOnCardData.prototype.getEndtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.card.AccessOnCardData.prototype.setEndtime = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.SmartCardData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.SmartCardData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.SmartCardData.displayName = 'proto.card.SmartCardData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.SmartCardData.prototype.toObject = function(opt_includeInstance) {
  return proto.card.SmartCardData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.SmartCardData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SmartCardData.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.card.SmartCardHeader.toObject(includeInstance, f),
    cardid: msg.getCardid_asB64(),
    credential: (f = msg.getCredential()) && proto.card.SmartCardCredential.toObject(includeInstance, f),
    accessondata: (f = msg.getAccessondata()) && proto.card.AccessOnCardData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.SmartCardData}
 */
proto.card.SmartCardData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.SmartCardData;
  return proto.card.SmartCardData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.SmartCardData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.SmartCardData}
 */
proto.card.SmartCardData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.card.SmartCardHeader;
      reader.readMessage(value,proto.card.SmartCardHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCardid(value);
      break;
    case 3:
      var value = new proto.card.SmartCardCredential;
      reader.readMessage(value,proto.card.SmartCardCredential.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    case 4:
      var value = new proto.card.AccessOnCardData;
      reader.readMessage(value,proto.card.AccessOnCardData.deserializeBinaryFromReader);
      msg.setAccessondata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.SmartCardData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.SmartCardData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.SmartCardData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SmartCardData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.card.SmartCardHeader.serializeBinaryToWriter
    );
  }
  f = message.getCardid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.card.SmartCardCredential.serializeBinaryToWriter
    );
  }
  f = message.getAccessondata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.card.AccessOnCardData.serializeBinaryToWriter
    );
  }
};


/**
 * optional SmartCardHeader header = 1;
 * @return {?proto.card.SmartCardHeader}
 */
proto.card.SmartCardData.prototype.getHeader = function() {
  return /** @type{?proto.card.SmartCardHeader} */ (
    jspb.Message.getWrapperField(this, proto.card.SmartCardHeader, 1));
};


/** @param {?proto.card.SmartCardHeader|undefined} value */
proto.card.SmartCardData.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.card.SmartCardData.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.SmartCardData.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes cardID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.card.SmartCardData.prototype.getCardid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes cardID = 2;
 * This is a type-conversion wrapper around `getCardid()`
 * @return {string}
 */
proto.card.SmartCardData.prototype.getCardid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCardid()));
};


/**
 * optional bytes cardID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCardid()`
 * @return {!Uint8Array}
 */
proto.card.SmartCardData.prototype.getCardid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCardid()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.SmartCardData.prototype.setCardid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional SmartCardCredential credential = 3;
 * @return {?proto.card.SmartCardCredential}
 */
proto.card.SmartCardData.prototype.getCredential = function() {
  return /** @type{?proto.card.SmartCardCredential} */ (
    jspb.Message.getWrapperField(this, proto.card.SmartCardCredential, 3));
};


/** @param {?proto.card.SmartCardCredential|undefined} value */
proto.card.SmartCardData.prototype.setCredential = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.card.SmartCardData.prototype.clearCredential = function() {
  this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.SmartCardData.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AccessOnCardData accessOnData = 4;
 * @return {?proto.card.AccessOnCardData}
 */
proto.card.SmartCardData.prototype.getAccessondata = function() {
  return /** @type{?proto.card.AccessOnCardData} */ (
    jspb.Message.getWrapperField(this, proto.card.AccessOnCardData, 4));
};


/** @param {?proto.card.AccessOnCardData|undefined} value */
proto.card.SmartCardData.prototype.setAccessondata = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.card.SmartCardData.prototype.clearAccessondata = function() {
  this.setAccessondata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.SmartCardData.prototype.hasAccessondata = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.CardData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.CardData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.CardData.displayName = 'proto.card.CardData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.CardData.prototype.toObject = function(opt_includeInstance) {
  return proto.card.CardData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.CardData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.CardData.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    csncarddata: (f = msg.getCsncarddata()) && proto.card.CSNCardData.toObject(includeInstance, f),
    smartcarddata: (f = msg.getSmartcarddata()) && proto.card.SmartCardData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.CardData}
 */
proto.card.CardData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.CardData;
  return proto.card.CardData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.CardData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.CardData}
 */
proto.card.CardData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.card.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.card.CSNCardData;
      reader.readMessage(value,proto.card.CSNCardData.deserializeBinaryFromReader);
      msg.setCsncarddata(value);
      break;
    case 3:
      var value = new proto.card.SmartCardData;
      reader.readMessage(value,proto.card.SmartCardData.deserializeBinaryFromReader);
      msg.setSmartcarddata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.CardData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.CardData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.CardData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.CardData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCsncarddata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.card.CSNCardData.serializeBinaryToWriter
    );
  }
  f = message.getSmartcarddata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.card.SmartCardData.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type type = 1;
 * @return {!proto.card.Type}
 */
proto.card.CardData.prototype.getType = function() {
  return /** @type {!proto.card.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.card.Type} value */
proto.card.CardData.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional CSNCardData CSNCardData = 2;
 * @return {?proto.card.CSNCardData}
 */
proto.card.CardData.prototype.getCsncarddata = function() {
  return /** @type{?proto.card.CSNCardData} */ (
    jspb.Message.getWrapperField(this, proto.card.CSNCardData, 2));
};


/** @param {?proto.card.CSNCardData|undefined} value */
proto.card.CardData.prototype.setCsncarddata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.card.CardData.prototype.clearCsncarddata = function() {
  this.setCsncarddata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.CardData.prototype.hasCsncarddata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SmartCardData smartCardData = 3;
 * @return {?proto.card.SmartCardData}
 */
proto.card.CardData.prototype.getSmartcarddata = function() {
  return /** @type{?proto.card.SmartCardData} */ (
    jspb.Message.getWrapperField(this, proto.card.SmartCardData, 3));
};


/** @param {?proto.card.SmartCardData|undefined} value */
proto.card.CardData.prototype.setSmartcarddata = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.card.CardData.prototype.clearSmartcarddata = function() {
  this.setSmartcarddata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.CardData.prototype.hasSmartcarddata = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.ScanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.ScanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.ScanRequest.displayName = 'proto.card.ScanRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.ScanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.ScanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.ScanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.ScanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.ScanRequest}
 */
proto.card.ScanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.ScanRequest;
  return proto.card.ScanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.ScanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.ScanRequest}
 */
proto.card.ScanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.ScanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.ScanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.ScanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.ScanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.card.ScanRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.card.ScanRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.ScanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.ScanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.ScanResponse.displayName = 'proto.card.ScanResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.ScanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.ScanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.ScanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.ScanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    carddata: (f = msg.getCarddata()) && proto.card.CardData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.ScanResponse}
 */
proto.card.ScanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.ScanResponse;
  return proto.card.ScanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.ScanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.ScanResponse}
 */
proto.card.ScanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.card.CardData;
      reader.readMessage(value,proto.card.CardData.deserializeBinaryFromReader);
      msg.setCarddata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.ScanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.ScanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.ScanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.ScanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCarddata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.card.CardData.serializeBinaryToWriter
    );
  }
};


/**
 * optional CardData cardData = 1;
 * @return {?proto.card.CardData}
 */
proto.card.ScanResponse.prototype.getCarddata = function() {
  return /** @type{?proto.card.CardData} */ (
    jspb.Message.getWrapperField(this, proto.card.CardData, 1));
};


/** @param {?proto.card.CardData|undefined} value */
proto.card.ScanResponse.prototype.setCarddata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.card.ScanResponse.prototype.clearCarddata = function() {
  this.setCarddata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.ScanResponse.prototype.hasCarddata = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.EraseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.EraseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.EraseRequest.displayName = 'proto.card.EraseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.EraseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.EraseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.EraseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.EraseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.EraseRequest}
 */
proto.card.EraseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.EraseRequest;
  return proto.card.EraseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.EraseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.EraseRequest}
 */
proto.card.EraseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.EraseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.EraseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.EraseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.EraseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.card.EraseRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.card.EraseRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.EraseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.EraseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.EraseResponse.displayName = 'proto.card.EraseResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.EraseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.EraseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.EraseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.EraseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.EraseResponse}
 */
proto.card.EraseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.EraseResponse;
  return proto.card.EraseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.EraseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.EraseResponse}
 */
proto.card.EraseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.EraseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.EraseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.EraseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.EraseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.WriteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.WriteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.WriteRequest.displayName = 'proto.card.WriteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.WriteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.WriteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.WriteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.WriteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    smartcarddata: (f = msg.getSmartcarddata()) && proto.card.SmartCardData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.WriteRequest}
 */
proto.card.WriteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.WriteRequest;
  return proto.card.WriteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.WriteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.WriteRequest}
 */
proto.card.WriteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = new proto.card.SmartCardData;
      reader.readMessage(value,proto.card.SmartCardData.deserializeBinaryFromReader);
      msg.setSmartcarddata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.WriteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.WriteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.WriteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.WriteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSmartcarddata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.card.SmartCardData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.card.WriteRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.card.WriteRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional SmartCardData smartCardData = 2;
 * @return {?proto.card.SmartCardData}
 */
proto.card.WriteRequest.prototype.getSmartcarddata = function() {
  return /** @type{?proto.card.SmartCardData} */ (
    jspb.Message.getWrapperField(this, proto.card.SmartCardData, 2));
};


/** @param {?proto.card.SmartCardData|undefined} value */
proto.card.WriteRequest.prototype.setSmartcarddata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.card.WriteRequest.prototype.clearSmartcarddata = function() {
  this.setSmartcarddata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.WriteRequest.prototype.hasSmartcarddata = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.WriteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.WriteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.WriteResponse.displayName = 'proto.card.WriteResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.WriteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.WriteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.WriteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.WriteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.WriteResponse}
 */
proto.card.WriteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.WriteResponse;
  return proto.card.WriteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.WriteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.WriteResponse}
 */
proto.card.WriteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.WriteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.WriteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.WriteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.WriteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.MifareConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.MifareConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.MifareConfig.displayName = 'proto.card.MifareConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.MifareConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.card.MifareConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.MifareConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.MifareConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    primarykey: msg.getPrimarykey_asB64(),
    secondarykey: msg.getSecondarykey_asB64(),
    startblockindex: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.MifareConfig}
 */
proto.card.MifareConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.MifareConfig;
  return proto.card.MifareConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.MifareConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.MifareConfig}
 */
proto.card.MifareConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrimarykey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecondarykey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartblockindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.MifareConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.MifareConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.MifareConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.MifareConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrimarykey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSecondarykey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStartblockindex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bytes primaryKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.card.MifareConfig.prototype.getPrimarykey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes primaryKey = 1;
 * This is a type-conversion wrapper around `getPrimarykey()`
 * @return {string}
 */
proto.card.MifareConfig.prototype.getPrimarykey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrimarykey()));
};


/**
 * optional bytes primaryKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrimarykey()`
 * @return {!Uint8Array}
 */
proto.card.MifareConfig.prototype.getPrimarykey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrimarykey()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.MifareConfig.prototype.setPrimarykey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes secondaryKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.card.MifareConfig.prototype.getSecondarykey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes secondaryKey = 2;
 * This is a type-conversion wrapper around `getSecondarykey()`
 * @return {string}
 */
proto.card.MifareConfig.prototype.getSecondarykey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecondarykey()));
};


/**
 * optional bytes secondaryKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecondarykey()`
 * @return {!Uint8Array}
 */
proto.card.MifareConfig.prototype.getSecondarykey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecondarykey()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.MifareConfig.prototype.setSecondarykey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 startBlockIndex = 3;
 * @return {number}
 */
proto.card.MifareConfig.prototype.getStartblockindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.card.MifareConfig.prototype.setStartblockindex = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.IClassConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.IClassConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.IClassConfig.displayName = 'proto.card.IClassConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.IClassConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.card.IClassConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.IClassConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.IClassConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    primarykey: msg.getPrimarykey_asB64(),
    secondarykey: msg.getSecondarykey_asB64(),
    startblockindex: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.IClassConfig}
 */
proto.card.IClassConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.IClassConfig;
  return proto.card.IClassConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.IClassConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.IClassConfig}
 */
proto.card.IClassConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrimarykey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecondarykey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartblockindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.IClassConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.IClassConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.IClassConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.IClassConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrimarykey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSecondarykey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStartblockindex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bytes primaryKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.card.IClassConfig.prototype.getPrimarykey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes primaryKey = 1;
 * This is a type-conversion wrapper around `getPrimarykey()`
 * @return {string}
 */
proto.card.IClassConfig.prototype.getPrimarykey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrimarykey()));
};


/**
 * optional bytes primaryKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrimarykey()`
 * @return {!Uint8Array}
 */
proto.card.IClassConfig.prototype.getPrimarykey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrimarykey()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.IClassConfig.prototype.setPrimarykey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes secondaryKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.card.IClassConfig.prototype.getSecondarykey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes secondaryKey = 2;
 * This is a type-conversion wrapper around `getSecondarykey()`
 * @return {string}
 */
proto.card.IClassConfig.prototype.getSecondarykey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecondarykey()));
};


/**
 * optional bytes secondaryKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecondarykey()`
 * @return {!Uint8Array}
 */
proto.card.IClassConfig.prototype.getSecondarykey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecondarykey()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.IClassConfig.prototype.setSecondarykey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 startBlockIndex = 3;
 * @return {number}
 */
proto.card.IClassConfig.prototype.getStartblockindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.card.IClassConfig.prototype.setStartblockindex = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.DESFireConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.DESFireConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.DESFireConfig.displayName = 'proto.card.DESFireConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.DESFireConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.card.DESFireConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.DESFireConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DESFireConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    primarykey: msg.getPrimarykey_asB64(),
    secondarykey: msg.getSecondarykey_asB64(),
    appid: msg.getAppid_asB64(),
    fileid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    encryptiontype: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.DESFireConfig}
 */
proto.card.DESFireConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.DESFireConfig;
  return proto.card.DESFireConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.DESFireConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.DESFireConfig}
 */
proto.card.DESFireConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrimarykey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecondarykey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFileid(value);
      break;
    case 5:
      var value = /** @type {!proto.card.DESFireEncryptionType} */ (reader.readEnum());
      msg.setEncryptiontype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.DESFireConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.DESFireConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.DESFireConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DESFireConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrimarykey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSecondarykey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAppid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getFileid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getEncryptiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional bytes primaryKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.card.DESFireConfig.prototype.getPrimarykey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes primaryKey = 1;
 * This is a type-conversion wrapper around `getPrimarykey()`
 * @return {string}
 */
proto.card.DESFireConfig.prototype.getPrimarykey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrimarykey()));
};


/**
 * optional bytes primaryKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrimarykey()`
 * @return {!Uint8Array}
 */
proto.card.DESFireConfig.prototype.getPrimarykey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrimarykey()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.DESFireConfig.prototype.setPrimarykey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes secondaryKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.card.DESFireConfig.prototype.getSecondarykey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes secondaryKey = 2;
 * This is a type-conversion wrapper around `getSecondarykey()`
 * @return {string}
 */
proto.card.DESFireConfig.prototype.getSecondarykey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecondarykey()));
};


/**
 * optional bytes secondaryKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecondarykey()`
 * @return {!Uint8Array}
 */
proto.card.DESFireConfig.prototype.getSecondarykey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecondarykey()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.DESFireConfig.prototype.setSecondarykey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes appID = 3;
 * @return {!(string|Uint8Array)}
 */
proto.card.DESFireConfig.prototype.getAppid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes appID = 3;
 * This is a type-conversion wrapper around `getAppid()`
 * @return {string}
 */
proto.card.DESFireConfig.prototype.getAppid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppid()));
};


/**
 * optional bytes appID = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppid()`
 * @return {!Uint8Array}
 */
proto.card.DESFireConfig.prototype.getAppid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppid()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.DESFireConfig.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 fileID = 4;
 * @return {number}
 */
proto.card.DESFireConfig.prototype.getFileid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.card.DESFireConfig.prototype.setFileid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional DESFireEncryptionType encryptionType = 5;
 * @return {!proto.card.DESFireEncryptionType}
 */
proto.card.DESFireConfig.prototype.getEncryptiontype = function() {
  return /** @type {!proto.card.DESFireEncryptionType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.card.DESFireEncryptionType} value */
proto.card.DESFireConfig.prototype.setEncryptiontype = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.SEOSConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.SEOSConfig.repeatedFields_, null);
};
goog.inherits(proto.card.SEOSConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.SEOSConfig.displayName = 'proto.card.SEOSConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.SEOSConfig.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.SEOSConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.card.SEOSConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.SEOSConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SEOSConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    oidadf: msg.getOidadf_asB64(),
    sizeadf: jspb.Message.getFieldWithDefault(msg, 2, 0),
    oiddataobjectidList: jspb.Message.getRepeatedField(msg, 3),
    sizedataobjectList: jspb.Message.getRepeatedField(msg, 4),
    primarykeyauth: msg.getPrimarykeyauth_asB64(),
    secondarykeyauth: msg.getSecondarykeyauth_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.SEOSConfig}
 */
proto.card.SEOSConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.SEOSConfig;
  return proto.card.SEOSConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.SEOSConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.SEOSConfig}
 */
proto.card.SEOSConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOidadf(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSizeadf(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setOiddataobjectidList(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setSizedataobjectList(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrimarykeyauth(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecondarykeyauth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.SEOSConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.SEOSConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.SEOSConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SEOSConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOidadf_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSizeadf();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getOiddataobjectidList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
  f = message.getSizedataobjectList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getPrimarykeyauth_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getSecondarykeyauth_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes OIDADF = 1;
 * @return {!(string|Uint8Array)}
 */
proto.card.SEOSConfig.prototype.getOidadf = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes OIDADF = 1;
 * This is a type-conversion wrapper around `getOidadf()`
 * @return {string}
 */
proto.card.SEOSConfig.prototype.getOidadf_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOidadf()));
};


/**
 * optional bytes OIDADF = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOidadf()`
 * @return {!Uint8Array}
 */
proto.card.SEOSConfig.prototype.getOidadf_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOidadf()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.SEOSConfig.prototype.setOidadf = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 sizeADF = 2;
 * @return {number}
 */
proto.card.SEOSConfig.prototype.getSizeadf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.card.SEOSConfig.prototype.setSizeadf = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated uint32 OIDDataObjectID = 3;
 * @return {!Array.<number>}
 */
proto.card.SEOSConfig.prototype.getOiddataobjectidList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.card.SEOSConfig.prototype.setOiddataobjectidList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.card.SEOSConfig.prototype.addOiddataobjectid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.card.SEOSConfig.prototype.clearOiddataobjectidList = function() {
  this.setOiddataobjectidList([]);
};


/**
 * repeated uint32 sizeDataObject = 4;
 * @return {!Array.<number>}
 */
proto.card.SEOSConfig.prototype.getSizedataobjectList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.card.SEOSConfig.prototype.setSizedataobjectList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.card.SEOSConfig.prototype.addSizedataobject = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.card.SEOSConfig.prototype.clearSizedataobjectList = function() {
  this.setSizedataobjectList([]);
};


/**
 * optional bytes primaryKeyAuth = 5;
 * @return {!(string|Uint8Array)}
 */
proto.card.SEOSConfig.prototype.getPrimarykeyauth = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes primaryKeyAuth = 5;
 * This is a type-conversion wrapper around `getPrimarykeyauth()`
 * @return {string}
 */
proto.card.SEOSConfig.prototype.getPrimarykeyauth_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrimarykeyauth()));
};


/**
 * optional bytes primaryKeyAuth = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrimarykeyauth()`
 * @return {!Uint8Array}
 */
proto.card.SEOSConfig.prototype.getPrimarykeyauth_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrimarykeyauth()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.SEOSConfig.prototype.setPrimarykeyauth = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes secondaryKeyAuth = 6;
 * @return {!(string|Uint8Array)}
 */
proto.card.SEOSConfig.prototype.getSecondarykeyauth = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes secondaryKeyAuth = 6;
 * This is a type-conversion wrapper around `getSecondarykeyauth()`
 * @return {string}
 */
proto.card.SEOSConfig.prototype.getSecondarykeyauth_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecondarykeyauth()));
};


/**
 * optional bytes secondaryKeyAuth = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecondarykeyauth()`
 * @return {!Uint8Array}
 */
proto.card.SEOSConfig.prototype.getSecondarykeyauth_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecondarykeyauth()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.SEOSConfig.prototype.setSecondarykeyauth = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.CardConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.CardConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.CardConfig.displayName = 'proto.card.CardConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.CardConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.card.CardConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.CardConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.CardConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    byteorder: jspb.Message.getFieldWithDefault(msg, 1, 0),
    usewiegandformat: jspb.Message.getFieldWithDefault(msg, 2, false),
    datatype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    usesecondarykey: jspb.Message.getFieldWithDefault(msg, 4, false),
    mifareconfig: (f = msg.getMifareconfig()) && proto.card.MifareConfig.toObject(includeInstance, f),
    iclassconfig: (f = msg.getIclassconfig()) && proto.card.IClassConfig.toObject(includeInstance, f),
    desfireconfig: (f = msg.getDesfireconfig()) && proto.card.DESFireConfig.toObject(includeInstance, f),
    seosconfig: (f = msg.getSeosconfig()) && proto.card.SEOSConfig.toObject(includeInstance, f),
    formatid: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.CardConfig}
 */
proto.card.CardConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.CardConfig;
  return proto.card.CardConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.CardConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.CardConfig}
 */
proto.card.CardConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.card.CardByteOrder} */ (reader.readEnum());
      msg.setByteorder(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsewiegandformat(value);
      break;
    case 3:
      var value = /** @type {!proto.card.CardDataType} */ (reader.readEnum());
      msg.setDatatype(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsesecondarykey(value);
      break;
    case 5:
      var value = new proto.card.MifareConfig;
      reader.readMessage(value,proto.card.MifareConfig.deserializeBinaryFromReader);
      msg.setMifareconfig(value);
      break;
    case 6:
      var value = new proto.card.IClassConfig;
      reader.readMessage(value,proto.card.IClassConfig.deserializeBinaryFromReader);
      msg.setIclassconfig(value);
      break;
    case 7:
      var value = new proto.card.DESFireConfig;
      reader.readMessage(value,proto.card.DESFireConfig.deserializeBinaryFromReader);
      msg.setDesfireconfig(value);
      break;
    case 8:
      var value = new proto.card.SEOSConfig;
      reader.readMessage(value,proto.card.SEOSConfig.deserializeBinaryFromReader);
      msg.setSeosconfig(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFormatid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.CardConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.CardConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.CardConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.CardConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getByteorder();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUsewiegandformat();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDatatype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getUsesecondarykey();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getMifareconfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.card.MifareConfig.serializeBinaryToWriter
    );
  }
  f = message.getIclassconfig();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.card.IClassConfig.serializeBinaryToWriter
    );
  }
  f = message.getDesfireconfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.card.DESFireConfig.serializeBinaryToWriter
    );
  }
  f = message.getSeosconfig();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.card.SEOSConfig.serializeBinaryToWriter
    );
  }
  f = message.getFormatid();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * optional CardByteOrder byteOrder = 1;
 * @return {!proto.card.CardByteOrder}
 */
proto.card.CardConfig.prototype.getByteorder = function() {
  return /** @type {!proto.card.CardByteOrder} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.card.CardByteOrder} value */
proto.card.CardConfig.prototype.setByteorder = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool useWiegandFormat = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.card.CardConfig.prototype.getUsewiegandformat = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.card.CardConfig.prototype.setUsewiegandformat = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional CardDataType dataType = 3;
 * @return {!proto.card.CardDataType}
 */
proto.card.CardConfig.prototype.getDatatype = function() {
  return /** @type {!proto.card.CardDataType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.card.CardDataType} value */
proto.card.CardConfig.prototype.setDatatype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool useSecondaryKey = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.card.CardConfig.prototype.getUsesecondarykey = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.card.CardConfig.prototype.setUsesecondarykey = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional MifareConfig mifareConfig = 5;
 * @return {?proto.card.MifareConfig}
 */
proto.card.CardConfig.prototype.getMifareconfig = function() {
  return /** @type{?proto.card.MifareConfig} */ (
    jspb.Message.getWrapperField(this, proto.card.MifareConfig, 5));
};


/** @param {?proto.card.MifareConfig|undefined} value */
proto.card.CardConfig.prototype.setMifareconfig = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.card.CardConfig.prototype.clearMifareconfig = function() {
  this.setMifareconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.CardConfig.prototype.hasMifareconfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional IClassConfig iClassConfig = 6;
 * @return {?proto.card.IClassConfig}
 */
proto.card.CardConfig.prototype.getIclassconfig = function() {
  return /** @type{?proto.card.IClassConfig} */ (
    jspb.Message.getWrapperField(this, proto.card.IClassConfig, 6));
};


/** @param {?proto.card.IClassConfig|undefined} value */
proto.card.CardConfig.prototype.setIclassconfig = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.card.CardConfig.prototype.clearIclassconfig = function() {
  this.setIclassconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.CardConfig.prototype.hasIclassconfig = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DESFireConfig DESFireConfig = 7;
 * @return {?proto.card.DESFireConfig}
 */
proto.card.CardConfig.prototype.getDesfireconfig = function() {
  return /** @type{?proto.card.DESFireConfig} */ (
    jspb.Message.getWrapperField(this, proto.card.DESFireConfig, 7));
};


/** @param {?proto.card.DESFireConfig|undefined} value */
proto.card.CardConfig.prototype.setDesfireconfig = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.card.CardConfig.prototype.clearDesfireconfig = function() {
  this.setDesfireconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.CardConfig.prototype.hasDesfireconfig = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SEOSConfig SEOSConfig = 8;
 * @return {?proto.card.SEOSConfig}
 */
proto.card.CardConfig.prototype.getSeosconfig = function() {
  return /** @type{?proto.card.SEOSConfig} */ (
    jspb.Message.getWrapperField(this, proto.card.SEOSConfig, 8));
};


/** @param {?proto.card.SEOSConfig|undefined} value */
proto.card.CardConfig.prototype.setSeosconfig = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.card.CardConfig.prototype.clearSeosconfig = function() {
  this.setSeosconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.CardConfig.prototype.hasSeosconfig = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 formatID = 9;
 * @return {number}
 */
proto.card.CardConfig.prototype.getFormatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.card.CardConfig.prototype.setFormatid = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.GetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.GetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.GetConfigRequest.displayName = 'proto.card.GetConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.GetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.GetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.GetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.GetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.GetConfigRequest}
 */
proto.card.GetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.GetConfigRequest;
  return proto.card.GetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.GetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.GetConfigRequest}
 */
proto.card.GetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.GetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.GetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.GetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.GetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.card.GetConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.card.GetConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.GetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.GetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.GetConfigResponse.displayName = 'proto.card.GetConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.GetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.GetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.GetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.GetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.card.CardConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.GetConfigResponse}
 */
proto.card.GetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.GetConfigResponse;
  return proto.card.GetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.GetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.GetConfigResponse}
 */
proto.card.GetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.card.CardConfig;
      reader.readMessage(value,proto.card.CardConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.GetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.GetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.GetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.GetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.card.CardConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional CardConfig config = 1;
 * @return {?proto.card.CardConfig}
 */
proto.card.GetConfigResponse.prototype.getConfig = function() {
  return /** @type{?proto.card.CardConfig} */ (
    jspb.Message.getWrapperField(this, proto.card.CardConfig, 1));
};


/** @param {?proto.card.CardConfig|undefined} value */
proto.card.GetConfigResponse.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.card.GetConfigResponse.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.GetConfigResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.SetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.SetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.SetConfigRequest.displayName = 'proto.card.SetConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.SetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.SetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.SetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    config: (f = msg.getConfig()) && proto.card.CardConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.SetConfigRequest}
 */
proto.card.SetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.SetConfigRequest;
  return proto.card.SetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.SetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.SetConfigRequest}
 */
proto.card.SetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = new proto.card.CardConfig;
      reader.readMessage(value,proto.card.CardConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.SetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.SetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.SetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.card.CardConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.card.SetConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.card.SetConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional CardConfig config = 2;
 * @return {?proto.card.CardConfig}
 */
proto.card.SetConfigRequest.prototype.getConfig = function() {
  return /** @type{?proto.card.CardConfig} */ (
    jspb.Message.getWrapperField(this, proto.card.CardConfig, 2));
};


/** @param {?proto.card.CardConfig|undefined} value */
proto.card.SetConfigRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.card.SetConfigRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.SetConfigRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.SetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.SetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.SetConfigResponse.displayName = 'proto.card.SetConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.SetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.SetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.SetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.SetConfigResponse}
 */
proto.card.SetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.SetConfigResponse;
  return proto.card.SetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.SetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.SetConfigResponse}
 */
proto.card.SetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.SetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.SetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.SetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.SetConfigMultiRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.SetConfigMultiRequest.repeatedFields_, null);
};
goog.inherits(proto.card.SetConfigMultiRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.SetConfigMultiRequest.displayName = 'proto.card.SetConfigMultiRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.SetConfigMultiRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.SetConfigMultiRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.SetConfigMultiRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.SetConfigMultiRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SetConfigMultiRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceidsList: jspb.Message.getRepeatedField(msg, 1),
    config: (f = msg.getConfig()) && proto.card.CardConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.SetConfigMultiRequest}
 */
proto.card.SetConfigMultiRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.SetConfigMultiRequest;
  return proto.card.SetConfigMultiRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.SetConfigMultiRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.SetConfigMultiRequest}
 */
proto.card.SetConfigMultiRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceidsList(value);
      break;
    case 2:
      var value = new proto.card.CardConfig;
      reader.readMessage(value,proto.card.CardConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.SetConfigMultiRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.SetConfigMultiRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.SetConfigMultiRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SetConfigMultiRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.card.CardConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 deviceIDs = 1;
 * @return {!Array.<number>}
 */
proto.card.SetConfigMultiRequest.prototype.getDeviceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.card.SetConfigMultiRequest.prototype.setDeviceidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.card.SetConfigMultiRequest.prototype.addDeviceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.card.SetConfigMultiRequest.prototype.clearDeviceidsList = function() {
  this.setDeviceidsList([]);
};


/**
 * optional CardConfig config = 2;
 * @return {?proto.card.CardConfig}
 */
proto.card.SetConfigMultiRequest.prototype.getConfig = function() {
  return /** @type{?proto.card.CardConfig} */ (
    jspb.Message.getWrapperField(this, proto.card.CardConfig, 2));
};


/** @param {?proto.card.CardConfig|undefined} value */
proto.card.SetConfigMultiRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.card.SetConfigMultiRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.SetConfigMultiRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.SetConfigMultiResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.SetConfigMultiResponse.repeatedFields_, null);
};
goog.inherits(proto.card.SetConfigMultiResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.SetConfigMultiResponse.displayName = 'proto.card.SetConfigMultiResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.SetConfigMultiResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.SetConfigMultiResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.SetConfigMultiResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.SetConfigMultiResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SetConfigMultiResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceerrorsList: jspb.Message.toObjectList(msg.getDeviceerrorsList(),
    err_pb.ErrorResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.SetConfigMultiResponse}
 */
proto.card.SetConfigMultiResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.SetConfigMultiResponse;
  return proto.card.SetConfigMultiResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.SetConfigMultiResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.SetConfigMultiResponse}
 */
proto.card.SetConfigMultiResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new err_pb.ErrorResponse;
      reader.readMessage(value,err_pb.ErrorResponse.deserializeBinaryFromReader);
      msg.addDeviceerrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.SetConfigMultiResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.SetConfigMultiResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.SetConfigMultiResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.SetConfigMultiResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceerrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      err_pb.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated err.ErrorResponse deviceErrors = 1;
 * @return {!Array.<!proto.err.ErrorResponse>}
 */
proto.card.SetConfigMultiResponse.prototype.getDeviceerrorsList = function() {
  return /** @type{!Array.<!proto.err.ErrorResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, err_pb.ErrorResponse, 1));
};


/** @param {!Array.<!proto.err.ErrorResponse>} value */
proto.card.SetConfigMultiResponse.prototype.setDeviceerrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.err.ErrorResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.err.ErrorResponse}
 */
proto.card.SetConfigMultiResponse.prototype.addDeviceerrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.err.ErrorResponse, opt_index);
};


proto.card.SetConfigMultiResponse.prototype.clearDeviceerrorsList = function() {
  this.setDeviceerrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.BlacklistItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.BlacklistItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.BlacklistItem.displayName = 'proto.card.BlacklistItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.BlacklistItem.prototype.toObject = function(opt_includeInstance) {
  return proto.card.BlacklistItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.BlacklistItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.BlacklistItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardid: msg.getCardid_asB64(),
    issuecount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.BlacklistItem}
 */
proto.card.BlacklistItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.BlacklistItem;
  return proto.card.BlacklistItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.BlacklistItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.BlacklistItem}
 */
proto.card.BlacklistItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCardid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIssuecount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.BlacklistItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.BlacklistItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.BlacklistItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.BlacklistItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIssuecount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes cardID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.card.BlacklistItem.prototype.getCardid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cardID = 1;
 * This is a type-conversion wrapper around `getCardid()`
 * @return {string}
 */
proto.card.BlacklistItem.prototype.getCardid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCardid()));
};


/**
 * optional bytes cardID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCardid()`
 * @return {!Uint8Array}
 */
proto.card.BlacklistItem.prototype.getCardid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCardid()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.BlacklistItem.prototype.setCardid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 issueCount = 2;
 * @return {number}
 */
proto.card.BlacklistItem.prototype.getIssuecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.card.BlacklistItem.prototype.setIssuecount = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.GetBlacklistRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.GetBlacklistRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.GetBlacklistRequest.displayName = 'proto.card.GetBlacklistRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.GetBlacklistRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.GetBlacklistRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.GetBlacklistRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.GetBlacklistRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.GetBlacklistRequest}
 */
proto.card.GetBlacklistRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.GetBlacklistRequest;
  return proto.card.GetBlacklistRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.GetBlacklistRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.GetBlacklistRequest}
 */
proto.card.GetBlacklistRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.GetBlacklistRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.GetBlacklistRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.GetBlacklistRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.GetBlacklistRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.card.GetBlacklistRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.card.GetBlacklistRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.GetBlacklistResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.GetBlacklistResponse.repeatedFields_, null);
};
goog.inherits(proto.card.GetBlacklistResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.GetBlacklistResponse.displayName = 'proto.card.GetBlacklistResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.GetBlacklistResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.GetBlacklistResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.GetBlacklistResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.GetBlacklistResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.GetBlacklistResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blacklistList: jspb.Message.toObjectList(msg.getBlacklistList(),
    proto.card.BlacklistItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.GetBlacklistResponse}
 */
proto.card.GetBlacklistResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.GetBlacklistResponse;
  return proto.card.GetBlacklistResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.GetBlacklistResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.GetBlacklistResponse}
 */
proto.card.GetBlacklistResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.card.BlacklistItem;
      reader.readMessage(value,proto.card.BlacklistItem.deserializeBinaryFromReader);
      msg.addBlacklist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.GetBlacklistResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.GetBlacklistResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.GetBlacklistResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.GetBlacklistResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlacklistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.card.BlacklistItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BlacklistItem blacklist = 1;
 * @return {!Array.<!proto.card.BlacklistItem>}
 */
proto.card.GetBlacklistResponse.prototype.getBlacklistList = function() {
  return /** @type{!Array.<!proto.card.BlacklistItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.card.BlacklistItem, 1));
};


/** @param {!Array.<!proto.card.BlacklistItem>} value */
proto.card.GetBlacklistResponse.prototype.setBlacklistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.card.BlacklistItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.card.BlacklistItem}
 */
proto.card.GetBlacklistResponse.prototype.addBlacklist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.card.BlacklistItem, opt_index);
};


proto.card.GetBlacklistResponse.prototype.clearBlacklistList = function() {
  this.setBlacklistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.AddBlacklistRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.AddBlacklistRequest.repeatedFields_, null);
};
goog.inherits(proto.card.AddBlacklistRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.AddBlacklistRequest.displayName = 'proto.card.AddBlacklistRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.AddBlacklistRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.AddBlacklistRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.AddBlacklistRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.AddBlacklistRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.AddBlacklistRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardinfosList: jspb.Message.toObjectList(msg.getCardinfosList(),
    proto.card.BlacklistItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.AddBlacklistRequest}
 */
proto.card.AddBlacklistRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.AddBlacklistRequest;
  return proto.card.AddBlacklistRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.AddBlacklistRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.AddBlacklistRequest}
 */
proto.card.AddBlacklistRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = new proto.card.BlacklistItem;
      reader.readMessage(value,proto.card.BlacklistItem.deserializeBinaryFromReader);
      msg.addCardinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.AddBlacklistRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.AddBlacklistRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.AddBlacklistRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.AddBlacklistRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCardinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.card.BlacklistItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.card.AddBlacklistRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.card.AddBlacklistRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated BlacklistItem cardInfos = 2;
 * @return {!Array.<!proto.card.BlacklistItem>}
 */
proto.card.AddBlacklistRequest.prototype.getCardinfosList = function() {
  return /** @type{!Array.<!proto.card.BlacklistItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.card.BlacklistItem, 2));
};


/** @param {!Array.<!proto.card.BlacklistItem>} value */
proto.card.AddBlacklistRequest.prototype.setCardinfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.card.BlacklistItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.card.BlacklistItem}
 */
proto.card.AddBlacklistRequest.prototype.addCardinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.card.BlacklistItem, opt_index);
};


proto.card.AddBlacklistRequest.prototype.clearCardinfosList = function() {
  this.setCardinfosList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.AddBlacklistResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.AddBlacklistResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.AddBlacklistResponse.displayName = 'proto.card.AddBlacklistResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.AddBlacklistResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.AddBlacklistResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.AddBlacklistResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.AddBlacklistResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.AddBlacklistResponse}
 */
proto.card.AddBlacklistResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.AddBlacklistResponse;
  return proto.card.AddBlacklistResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.AddBlacklistResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.AddBlacklistResponse}
 */
proto.card.AddBlacklistResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.AddBlacklistResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.AddBlacklistResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.AddBlacklistResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.AddBlacklistResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.AddBlacklistMultiRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.AddBlacklistMultiRequest.repeatedFields_, null);
};
goog.inherits(proto.card.AddBlacklistMultiRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.AddBlacklistMultiRequest.displayName = 'proto.card.AddBlacklistMultiRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.AddBlacklistMultiRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.AddBlacklistMultiRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.AddBlacklistMultiRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.AddBlacklistMultiRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.AddBlacklistMultiRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceidsList: jspb.Message.getRepeatedField(msg, 1),
    cardinfosList: jspb.Message.toObjectList(msg.getCardinfosList(),
    proto.card.BlacklistItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.AddBlacklistMultiRequest}
 */
proto.card.AddBlacklistMultiRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.AddBlacklistMultiRequest;
  return proto.card.AddBlacklistMultiRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.AddBlacklistMultiRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.AddBlacklistMultiRequest}
 */
proto.card.AddBlacklistMultiRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceidsList(value);
      break;
    case 2:
      var value = new proto.card.BlacklistItem;
      reader.readMessage(value,proto.card.BlacklistItem.deserializeBinaryFromReader);
      msg.addCardinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.AddBlacklistMultiRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.AddBlacklistMultiRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.AddBlacklistMultiRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.AddBlacklistMultiRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getCardinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.card.BlacklistItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 deviceIDs = 1;
 * @return {!Array.<number>}
 */
proto.card.AddBlacklistMultiRequest.prototype.getDeviceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.card.AddBlacklistMultiRequest.prototype.setDeviceidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.card.AddBlacklistMultiRequest.prototype.addDeviceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.card.AddBlacklistMultiRequest.prototype.clearDeviceidsList = function() {
  this.setDeviceidsList([]);
};


/**
 * repeated BlacklistItem cardInfos = 2;
 * @return {!Array.<!proto.card.BlacklistItem>}
 */
proto.card.AddBlacklistMultiRequest.prototype.getCardinfosList = function() {
  return /** @type{!Array.<!proto.card.BlacklistItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.card.BlacklistItem, 2));
};


/** @param {!Array.<!proto.card.BlacklistItem>} value */
proto.card.AddBlacklistMultiRequest.prototype.setCardinfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.card.BlacklistItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.card.BlacklistItem}
 */
proto.card.AddBlacklistMultiRequest.prototype.addCardinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.card.BlacklistItem, opt_index);
};


proto.card.AddBlacklistMultiRequest.prototype.clearCardinfosList = function() {
  this.setCardinfosList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.AddBlacklistMultiResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.AddBlacklistMultiResponse.repeatedFields_, null);
};
goog.inherits(proto.card.AddBlacklistMultiResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.AddBlacklistMultiResponse.displayName = 'proto.card.AddBlacklistMultiResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.AddBlacklistMultiResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.AddBlacklistMultiResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.AddBlacklistMultiResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.AddBlacklistMultiResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.AddBlacklistMultiResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceerrorsList: jspb.Message.toObjectList(msg.getDeviceerrorsList(),
    err_pb.ErrorResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.AddBlacklistMultiResponse}
 */
proto.card.AddBlacklistMultiResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.AddBlacklistMultiResponse;
  return proto.card.AddBlacklistMultiResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.AddBlacklistMultiResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.AddBlacklistMultiResponse}
 */
proto.card.AddBlacklistMultiResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new err_pb.ErrorResponse;
      reader.readMessage(value,err_pb.ErrorResponse.deserializeBinaryFromReader);
      msg.addDeviceerrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.AddBlacklistMultiResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.AddBlacklistMultiResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.AddBlacklistMultiResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.AddBlacklistMultiResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceerrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      err_pb.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated err.ErrorResponse deviceErrors = 1;
 * @return {!Array.<!proto.err.ErrorResponse>}
 */
proto.card.AddBlacklistMultiResponse.prototype.getDeviceerrorsList = function() {
  return /** @type{!Array.<!proto.err.ErrorResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, err_pb.ErrorResponse, 1));
};


/** @param {!Array.<!proto.err.ErrorResponse>} value */
proto.card.AddBlacklistMultiResponse.prototype.setDeviceerrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.err.ErrorResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.err.ErrorResponse}
 */
proto.card.AddBlacklistMultiResponse.prototype.addDeviceerrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.err.ErrorResponse, opt_index);
};


proto.card.AddBlacklistMultiResponse.prototype.clearDeviceerrorsList = function() {
  this.setDeviceerrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.DeleteBlacklistRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.DeleteBlacklistRequest.repeatedFields_, null);
};
goog.inherits(proto.card.DeleteBlacklistRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.DeleteBlacklistRequest.displayName = 'proto.card.DeleteBlacklistRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.DeleteBlacklistRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.DeleteBlacklistRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.DeleteBlacklistRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.DeleteBlacklistRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteBlacklistRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardinfosList: jspb.Message.toObjectList(msg.getCardinfosList(),
    proto.card.BlacklistItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.DeleteBlacklistRequest}
 */
proto.card.DeleteBlacklistRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.DeleteBlacklistRequest;
  return proto.card.DeleteBlacklistRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.DeleteBlacklistRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.DeleteBlacklistRequest}
 */
proto.card.DeleteBlacklistRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = new proto.card.BlacklistItem;
      reader.readMessage(value,proto.card.BlacklistItem.deserializeBinaryFromReader);
      msg.addCardinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.DeleteBlacklistRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.DeleteBlacklistRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.DeleteBlacklistRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteBlacklistRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCardinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.card.BlacklistItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.card.DeleteBlacklistRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.card.DeleteBlacklistRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated BlacklistItem cardInfos = 2;
 * @return {!Array.<!proto.card.BlacklistItem>}
 */
proto.card.DeleteBlacklistRequest.prototype.getCardinfosList = function() {
  return /** @type{!Array.<!proto.card.BlacklistItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.card.BlacklistItem, 2));
};


/** @param {!Array.<!proto.card.BlacklistItem>} value */
proto.card.DeleteBlacklistRequest.prototype.setCardinfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.card.BlacklistItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.card.BlacklistItem}
 */
proto.card.DeleteBlacklistRequest.prototype.addCardinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.card.BlacklistItem, opt_index);
};


proto.card.DeleteBlacklistRequest.prototype.clearCardinfosList = function() {
  this.setCardinfosList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.DeleteBlacklistResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.DeleteBlacklistResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.DeleteBlacklistResponse.displayName = 'proto.card.DeleteBlacklistResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.DeleteBlacklistResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.DeleteBlacklistResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.DeleteBlacklistResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteBlacklistResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.DeleteBlacklistResponse}
 */
proto.card.DeleteBlacklistResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.DeleteBlacklistResponse;
  return proto.card.DeleteBlacklistResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.DeleteBlacklistResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.DeleteBlacklistResponse}
 */
proto.card.DeleteBlacklistResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.DeleteBlacklistResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.DeleteBlacklistResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.DeleteBlacklistResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteBlacklistResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.DeleteBlacklistMultiRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.DeleteBlacklistMultiRequest.repeatedFields_, null);
};
goog.inherits(proto.card.DeleteBlacklistMultiRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.DeleteBlacklistMultiRequest.displayName = 'proto.card.DeleteBlacklistMultiRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.DeleteBlacklistMultiRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.DeleteBlacklistMultiRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.DeleteBlacklistMultiRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.DeleteBlacklistMultiRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteBlacklistMultiRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceidsList: jspb.Message.getRepeatedField(msg, 1),
    cardinfosList: jspb.Message.toObjectList(msg.getCardinfosList(),
    proto.card.BlacklistItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.DeleteBlacklistMultiRequest}
 */
proto.card.DeleteBlacklistMultiRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.DeleteBlacklistMultiRequest;
  return proto.card.DeleteBlacklistMultiRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.DeleteBlacklistMultiRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.DeleteBlacklistMultiRequest}
 */
proto.card.DeleteBlacklistMultiRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceidsList(value);
      break;
    case 2:
      var value = new proto.card.BlacklistItem;
      reader.readMessage(value,proto.card.BlacklistItem.deserializeBinaryFromReader);
      msg.addCardinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.DeleteBlacklistMultiRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.DeleteBlacklistMultiRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.DeleteBlacklistMultiRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteBlacklistMultiRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getCardinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.card.BlacklistItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 deviceIDs = 1;
 * @return {!Array.<number>}
 */
proto.card.DeleteBlacklistMultiRequest.prototype.getDeviceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.card.DeleteBlacklistMultiRequest.prototype.setDeviceidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.card.DeleteBlacklistMultiRequest.prototype.addDeviceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.card.DeleteBlacklistMultiRequest.prototype.clearDeviceidsList = function() {
  this.setDeviceidsList([]);
};


/**
 * repeated BlacklistItem cardInfos = 2;
 * @return {!Array.<!proto.card.BlacklistItem>}
 */
proto.card.DeleteBlacklistMultiRequest.prototype.getCardinfosList = function() {
  return /** @type{!Array.<!proto.card.BlacklistItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.card.BlacklistItem, 2));
};


/** @param {!Array.<!proto.card.BlacklistItem>} value */
proto.card.DeleteBlacklistMultiRequest.prototype.setCardinfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.card.BlacklistItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.card.BlacklistItem}
 */
proto.card.DeleteBlacklistMultiRequest.prototype.addCardinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.card.BlacklistItem, opt_index);
};


proto.card.DeleteBlacklistMultiRequest.prototype.clearCardinfosList = function() {
  this.setCardinfosList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.DeleteBlacklistMultiResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.DeleteBlacklistMultiResponse.repeatedFields_, null);
};
goog.inherits(proto.card.DeleteBlacklistMultiResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.DeleteBlacklistMultiResponse.displayName = 'proto.card.DeleteBlacklistMultiResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.DeleteBlacklistMultiResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.DeleteBlacklistMultiResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.DeleteBlacklistMultiResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.DeleteBlacklistMultiResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteBlacklistMultiResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceerrorsList: jspb.Message.toObjectList(msg.getDeviceerrorsList(),
    err_pb.ErrorResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.DeleteBlacklistMultiResponse}
 */
proto.card.DeleteBlacklistMultiResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.DeleteBlacklistMultiResponse;
  return proto.card.DeleteBlacklistMultiResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.DeleteBlacklistMultiResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.DeleteBlacklistMultiResponse}
 */
proto.card.DeleteBlacklistMultiResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new err_pb.ErrorResponse;
      reader.readMessage(value,err_pb.ErrorResponse.deserializeBinaryFromReader);
      msg.addDeviceerrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.DeleteBlacklistMultiResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.DeleteBlacklistMultiResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.DeleteBlacklistMultiResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteBlacklistMultiResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceerrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      err_pb.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated err.ErrorResponse deviceErrors = 1;
 * @return {!Array.<!proto.err.ErrorResponse>}
 */
proto.card.DeleteBlacklistMultiResponse.prototype.getDeviceerrorsList = function() {
  return /** @type{!Array.<!proto.err.ErrorResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, err_pb.ErrorResponse, 1));
};


/** @param {!Array.<!proto.err.ErrorResponse>} value */
proto.card.DeleteBlacklistMultiResponse.prototype.setDeviceerrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.err.ErrorResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.err.ErrorResponse}
 */
proto.card.DeleteBlacklistMultiResponse.prototype.addDeviceerrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.err.ErrorResponse, opt_index);
};


proto.card.DeleteBlacklistMultiResponse.prototype.clearDeviceerrorsList = function() {
  this.setDeviceerrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.DeleteAllBlacklistRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.DeleteAllBlacklistRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.DeleteAllBlacklistRequest.displayName = 'proto.card.DeleteAllBlacklistRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.DeleteAllBlacklistRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.DeleteAllBlacklistRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.DeleteAllBlacklistRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteAllBlacklistRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.DeleteAllBlacklistRequest}
 */
proto.card.DeleteAllBlacklistRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.DeleteAllBlacklistRequest;
  return proto.card.DeleteAllBlacklistRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.DeleteAllBlacklistRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.DeleteAllBlacklistRequest}
 */
proto.card.DeleteAllBlacklistRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.DeleteAllBlacklistRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.DeleteAllBlacklistRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.DeleteAllBlacklistRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteAllBlacklistRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.card.DeleteAllBlacklistRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.card.DeleteAllBlacklistRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.DeleteAllBlacklistResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.DeleteAllBlacklistResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.DeleteAllBlacklistResponse.displayName = 'proto.card.DeleteAllBlacklistResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.DeleteAllBlacklistResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.DeleteAllBlacklistResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.DeleteAllBlacklistResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteAllBlacklistResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.DeleteAllBlacklistResponse}
 */
proto.card.DeleteAllBlacklistResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.DeleteAllBlacklistResponse;
  return proto.card.DeleteAllBlacklistResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.DeleteAllBlacklistResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.DeleteAllBlacklistResponse}
 */
proto.card.DeleteAllBlacklistResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.DeleteAllBlacklistResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.DeleteAllBlacklistResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.DeleteAllBlacklistResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteAllBlacklistResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.DeleteAllBlacklistMultiRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.DeleteAllBlacklistMultiRequest.repeatedFields_, null);
};
goog.inherits(proto.card.DeleteAllBlacklistMultiRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.DeleteAllBlacklistMultiRequest.displayName = 'proto.card.DeleteAllBlacklistMultiRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.DeleteAllBlacklistMultiRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.DeleteAllBlacklistMultiRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.DeleteAllBlacklistMultiRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.DeleteAllBlacklistMultiRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteAllBlacklistMultiRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceidsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.DeleteAllBlacklistMultiRequest}
 */
proto.card.DeleteAllBlacklistMultiRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.DeleteAllBlacklistMultiRequest;
  return proto.card.DeleteAllBlacklistMultiRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.DeleteAllBlacklistMultiRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.DeleteAllBlacklistMultiRequest}
 */
proto.card.DeleteAllBlacklistMultiRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.DeleteAllBlacklistMultiRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.DeleteAllBlacklistMultiRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.DeleteAllBlacklistMultiRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteAllBlacklistMultiRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 deviceIDs = 1;
 * @return {!Array.<number>}
 */
proto.card.DeleteAllBlacklistMultiRequest.prototype.getDeviceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.card.DeleteAllBlacklistMultiRequest.prototype.setDeviceidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.card.DeleteAllBlacklistMultiRequest.prototype.addDeviceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.card.DeleteAllBlacklistMultiRequest.prototype.clearDeviceidsList = function() {
  this.setDeviceidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.DeleteAllBlacklistMultiResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.DeleteAllBlacklistMultiResponse.repeatedFields_, null);
};
goog.inherits(proto.card.DeleteAllBlacklistMultiResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.DeleteAllBlacklistMultiResponse.displayName = 'proto.card.DeleteAllBlacklistMultiResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.DeleteAllBlacklistMultiResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.DeleteAllBlacklistMultiResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.DeleteAllBlacklistMultiResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.DeleteAllBlacklistMultiResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteAllBlacklistMultiResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceerrorsList: jspb.Message.toObjectList(msg.getDeviceerrorsList(),
    err_pb.ErrorResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.DeleteAllBlacklistMultiResponse}
 */
proto.card.DeleteAllBlacklistMultiResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.DeleteAllBlacklistMultiResponse;
  return proto.card.DeleteAllBlacklistMultiResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.DeleteAllBlacklistMultiResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.DeleteAllBlacklistMultiResponse}
 */
proto.card.DeleteAllBlacklistMultiResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new err_pb.ErrorResponse;
      reader.readMessage(value,err_pb.ErrorResponse.deserializeBinaryFromReader);
      msg.addDeviceerrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.DeleteAllBlacklistMultiResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.DeleteAllBlacklistMultiResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.DeleteAllBlacklistMultiResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.DeleteAllBlacklistMultiResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceerrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      err_pb.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated err.ErrorResponse deviceErrors = 1;
 * @return {!Array.<!proto.err.ErrorResponse>}
 */
proto.card.DeleteAllBlacklistMultiResponse.prototype.getDeviceerrorsList = function() {
  return /** @type{!Array.<!proto.err.ErrorResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, err_pb.ErrorResponse, 1));
};


/** @param {!Array.<!proto.err.ErrorResponse>} value */
proto.card.DeleteAllBlacklistMultiResponse.prototype.setDeviceerrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.err.ErrorResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.err.ErrorResponse}
 */
proto.card.DeleteAllBlacklistMultiResponse.prototype.addDeviceerrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.err.ErrorResponse, opt_index);
};


proto.card.DeleteAllBlacklistMultiResponse.prototype.clearDeviceerrorsList = function() {
  this.setDeviceerrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.Card1XConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.Card1XConfig.repeatedFields_, null);
};
goog.inherits(proto.card.Card1XConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.Card1XConfig.displayName = 'proto.card.Card1XConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.Card1XConfig.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.Card1XConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.card.Card1XConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.Card1XConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Card1XConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    disabled: jspb.Message.getFieldWithDefault(msg, 1, false),
    usecsnonly: jspb.Message.getFieldWithDefault(msg, 2, false),
    bioentrycompatible: jspb.Message.getFieldWithDefault(msg, 3, false),
    usesecondarykey: jspb.Message.getFieldWithDefault(msg, 4, false),
    primarykey: msg.getPrimarykey_asB64(),
    secondarykey: msg.getSecondarykey_asB64(),
    cisindex: jspb.Message.getFieldWithDefault(msg, 7, 0),
    numoftemplate: jspb.Message.getFieldWithDefault(msg, 8, 0),
    templatesize: jspb.Message.getFieldWithDefault(msg, 9, 0),
    templatestartblocksList: jspb.Message.getRepeatedField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.Card1XConfig}
 */
proto.card.Card1XConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.Card1XConfig;
  return proto.card.Card1XConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.Card1XConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.Card1XConfig}
 */
proto.card.Card1XConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabled(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsecsnonly(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBioentrycompatible(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsesecondarykey(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrimarykey(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecondarykey(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCisindex(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumoftemplate(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTemplatesize(value);
      break;
    case 10:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setTemplatestartblocksList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.Card1XConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.Card1XConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.Card1XConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Card1XConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getUsecsnonly();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBioentrycompatible();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getUsesecondarykey();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPrimarykey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getSecondarykey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getCisindex();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getNumoftemplate();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getTemplatesize();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getTemplatestartblocksList();
  if (f.length > 0) {
    writer.writePackedUint32(
      10,
      f
    );
  }
};


/**
 * optional bool disabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.card.Card1XConfig.prototype.getDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.card.Card1XConfig.prototype.setDisabled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool useCSNOnly = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.card.Card1XConfig.prototype.getUsecsnonly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.card.Card1XConfig.prototype.setUsecsnonly = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool bioEntryCompatible = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.card.Card1XConfig.prototype.getBioentrycompatible = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.card.Card1XConfig.prototype.setBioentrycompatible = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool useSecondaryKey = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.card.Card1XConfig.prototype.getUsesecondarykey = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.card.Card1XConfig.prototype.setUsesecondarykey = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes primaryKey = 5;
 * @return {!(string|Uint8Array)}
 */
proto.card.Card1XConfig.prototype.getPrimarykey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes primaryKey = 5;
 * This is a type-conversion wrapper around `getPrimarykey()`
 * @return {string}
 */
proto.card.Card1XConfig.prototype.getPrimarykey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrimarykey()));
};


/**
 * optional bytes primaryKey = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrimarykey()`
 * @return {!Uint8Array}
 */
proto.card.Card1XConfig.prototype.getPrimarykey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrimarykey()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.Card1XConfig.prototype.setPrimarykey = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes secondaryKey = 6;
 * @return {!(string|Uint8Array)}
 */
proto.card.Card1XConfig.prototype.getSecondarykey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes secondaryKey = 6;
 * This is a type-conversion wrapper around `getSecondarykey()`
 * @return {string}
 */
proto.card.Card1XConfig.prototype.getSecondarykey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecondarykey()));
};


/**
 * optional bytes secondaryKey = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecondarykey()`
 * @return {!Uint8Array}
 */
proto.card.Card1XConfig.prototype.getSecondarykey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecondarykey()));
};


/** @param {!(string|Uint8Array)} value */
proto.card.Card1XConfig.prototype.setSecondarykey = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 CISIndex = 7;
 * @return {number}
 */
proto.card.Card1XConfig.prototype.getCisindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.card.Card1XConfig.prototype.setCisindex = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 numOfTemplate = 8;
 * @return {number}
 */
proto.card.Card1XConfig.prototype.getNumoftemplate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.card.Card1XConfig.prototype.setNumoftemplate = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 templateSize = 9;
 * @return {number}
 */
proto.card.Card1XConfig.prototype.getTemplatesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.card.Card1XConfig.prototype.setTemplatesize = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * repeated uint32 templateStartBlocks = 10;
 * @return {!Array.<number>}
 */
proto.card.Card1XConfig.prototype.getTemplatestartblocksList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array.<number>} value */
proto.card.Card1XConfig.prototype.setTemplatestartblocksList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.card.Card1XConfig.prototype.addTemplatestartblocks = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.card.Card1XConfig.prototype.clearTemplatestartblocksList = function() {
  this.setTemplatestartblocksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.Get1XConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.Get1XConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.Get1XConfigRequest.displayName = 'proto.card.Get1XConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.Get1XConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.Get1XConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.Get1XConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Get1XConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.Get1XConfigRequest}
 */
proto.card.Get1XConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.Get1XConfigRequest;
  return proto.card.Get1XConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.Get1XConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.Get1XConfigRequest}
 */
proto.card.Get1XConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.Get1XConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.Get1XConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.Get1XConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Get1XConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.card.Get1XConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.card.Get1XConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.Get1XConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.Get1XConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.Get1XConfigResponse.displayName = 'proto.card.Get1XConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.Get1XConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.Get1XConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.Get1XConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Get1XConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.card.Card1XConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.Get1XConfigResponse}
 */
proto.card.Get1XConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.Get1XConfigResponse;
  return proto.card.Get1XConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.Get1XConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.Get1XConfigResponse}
 */
proto.card.Get1XConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.card.Card1XConfig;
      reader.readMessage(value,proto.card.Card1XConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.Get1XConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.Get1XConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.Get1XConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Get1XConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.card.Card1XConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional Card1XConfig config = 1;
 * @return {?proto.card.Card1XConfig}
 */
proto.card.Get1XConfigResponse.prototype.getConfig = function() {
  return /** @type{?proto.card.Card1XConfig} */ (
    jspb.Message.getWrapperField(this, proto.card.Card1XConfig, 1));
};


/** @param {?proto.card.Card1XConfig|undefined} value */
proto.card.Get1XConfigResponse.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.card.Get1XConfigResponse.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.Get1XConfigResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.Set1XConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.Set1XConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.Set1XConfigRequest.displayName = 'proto.card.Set1XConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.Set1XConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.Set1XConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.Set1XConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Set1XConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    config: (f = msg.getConfig()) && proto.card.Card1XConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.Set1XConfigRequest}
 */
proto.card.Set1XConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.Set1XConfigRequest;
  return proto.card.Set1XConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.Set1XConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.Set1XConfigRequest}
 */
proto.card.Set1XConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = new proto.card.Card1XConfig;
      reader.readMessage(value,proto.card.Card1XConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.Set1XConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.Set1XConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.Set1XConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Set1XConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.card.Card1XConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.card.Set1XConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.card.Set1XConfigRequest.prototype.setDeviceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Card1XConfig config = 2;
 * @return {?proto.card.Card1XConfig}
 */
proto.card.Set1XConfigRequest.prototype.getConfig = function() {
  return /** @type{?proto.card.Card1XConfig} */ (
    jspb.Message.getWrapperField(this, proto.card.Card1XConfig, 2));
};


/** @param {?proto.card.Card1XConfig|undefined} value */
proto.card.Set1XConfigRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.card.Set1XConfigRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.Set1XConfigRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.Set1XConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.card.Set1XConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.Set1XConfigResponse.displayName = 'proto.card.Set1XConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.Set1XConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.Set1XConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.Set1XConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Set1XConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.Set1XConfigResponse}
 */
proto.card.Set1XConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.Set1XConfigResponse;
  return proto.card.Set1XConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.Set1XConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.Set1XConfigResponse}
 */
proto.card.Set1XConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.Set1XConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.Set1XConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.Set1XConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Set1XConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.Set1XConfigMultiRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.Set1XConfigMultiRequest.repeatedFields_, null);
};
goog.inherits(proto.card.Set1XConfigMultiRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.Set1XConfigMultiRequest.displayName = 'proto.card.Set1XConfigMultiRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.Set1XConfigMultiRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.Set1XConfigMultiRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.card.Set1XConfigMultiRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.Set1XConfigMultiRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Set1XConfigMultiRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceidsList: jspb.Message.getRepeatedField(msg, 1),
    config: (f = msg.getConfig()) && proto.card.Card1XConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.Set1XConfigMultiRequest}
 */
proto.card.Set1XConfigMultiRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.Set1XConfigMultiRequest;
  return proto.card.Set1XConfigMultiRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.Set1XConfigMultiRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.Set1XConfigMultiRequest}
 */
proto.card.Set1XConfigMultiRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDeviceidsList(value);
      break;
    case 2:
      var value = new proto.card.Card1XConfig;
      reader.readMessage(value,proto.card.Card1XConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.Set1XConfigMultiRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.Set1XConfigMultiRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.Set1XConfigMultiRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Set1XConfigMultiRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.card.Card1XConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 deviceIDs = 1;
 * @return {!Array.<number>}
 */
proto.card.Set1XConfigMultiRequest.prototype.getDeviceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.card.Set1XConfigMultiRequest.prototype.setDeviceidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.card.Set1XConfigMultiRequest.prototype.addDeviceids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.card.Set1XConfigMultiRequest.prototype.clearDeviceidsList = function() {
  this.setDeviceidsList([]);
};


/**
 * optional Card1XConfig config = 2;
 * @return {?proto.card.Card1XConfig}
 */
proto.card.Set1XConfigMultiRequest.prototype.getConfig = function() {
  return /** @type{?proto.card.Card1XConfig} */ (
    jspb.Message.getWrapperField(this, proto.card.Card1XConfig, 2));
};


/** @param {?proto.card.Card1XConfig|undefined} value */
proto.card.Set1XConfigMultiRequest.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.card.Set1XConfigMultiRequest.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.card.Set1XConfigMultiRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.card.Set1XConfigMultiResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.card.Set1XConfigMultiResponse.repeatedFields_, null);
};
goog.inherits(proto.card.Set1XConfigMultiResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.card.Set1XConfigMultiResponse.displayName = 'proto.card.Set1XConfigMultiResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.card.Set1XConfigMultiResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.card.Set1XConfigMultiResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.card.Set1XConfigMultiResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.card.Set1XConfigMultiResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Set1XConfigMultiResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceerrorsList: jspb.Message.toObjectList(msg.getDeviceerrorsList(),
    err_pb.ErrorResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.card.Set1XConfigMultiResponse}
 */
proto.card.Set1XConfigMultiResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.card.Set1XConfigMultiResponse;
  return proto.card.Set1XConfigMultiResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.card.Set1XConfigMultiResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.card.Set1XConfigMultiResponse}
 */
proto.card.Set1XConfigMultiResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new err_pb.ErrorResponse;
      reader.readMessage(value,err_pb.ErrorResponse.deserializeBinaryFromReader);
      msg.addDeviceerrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.card.Set1XConfigMultiResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.card.Set1XConfigMultiResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.card.Set1XConfigMultiResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.card.Set1XConfigMultiResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceerrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      err_pb.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated err.ErrorResponse deviceErrors = 1;
 * @return {!Array.<!proto.err.ErrorResponse>}
 */
proto.card.Set1XConfigMultiResponse.prototype.getDeviceerrorsList = function() {
  return /** @type{!Array.<!proto.err.ErrorResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, err_pb.ErrorResponse, 1));
};


/** @param {!Array.<!proto.err.ErrorResponse>} value */
proto.card.Set1XConfigMultiResponse.prototype.setDeviceerrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.err.ErrorResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.err.ErrorResponse}
 */
proto.card.Set1XConfigMultiResponse.prototype.addDeviceerrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.err.ErrorResponse, opt_index);
};


proto.card.Set1XConfigMultiResponse.prototype.clearDeviceerrorsList = function() {
  this.setDeviceerrorsList([]);
};


/**
 * @enum {number}
 */
proto.card.Type = {
  CARD_TYPE_UNKNOWN: 0,
  CARD_TYPE_CSN: 1,
  CARD_TYPE_SECURE: 2,
  CARD_TYPE_ACCESS: 3,
  CARD_TYPE_WIEGAND: 10
};

/**
 * @enum {number}
 */
proto.card.DESFireEncryptionType = {
  ENC_DES_3DES: 0,
  ENC_AES: 1
};

/**
 * @enum {number}
 */
proto.card.CardByteOrder = {
  MSB: 0,
  LSB: 1
};

/**
 * @enum {number}
 */
proto.card.CardDataType = {
  DATA_BINARY: 0,
  DATA_ASCII: 1,
  DATA_UTF16: 2,
  DATA_BCD: 3
};

goog.object.extend(exports, proto.card);
