// Code generated by protoc-gen-go. DO NOT EDIT.
// source: network.proto

package network

import (
	connect "biostar/service/connect"
	err "biostar/service/err"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EthernetBaseband int32

const (
	EthernetBaseband_BASEBAND_10BASE_T  EthernetBaseband = 0
	EthernetBaseband_BASEBAND_100BASE_T EthernetBaseband = 1
)

var EthernetBaseband_name = map[int32]string{
	0: "BASEBAND_10BASE_T",
	1: "BASEBAND_100BASE_T",
}

var EthernetBaseband_value = map[string]int32{
	"BASEBAND_10BASE_T":  0,
	"BASEBAND_100BASE_T": 1,
}

func (x EthernetBaseband) String() string {
	return proto.EnumName(EthernetBaseband_name, int32(x))
}

func (EthernetBaseband) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0}
}

type WLANOperationMode int32

const (
	WLANOperationMode_WLAN_OPMODE_MANAGED WLANOperationMode = 0
	WLANOperationMode_WLAN_OPMODE_ADHOC   WLANOperationMode = 1
)

var WLANOperationMode_name = map[int32]string{
	0: "WLAN_OPMODE_MANAGED",
	1: "WLAN_OPMODE_ADHOC",
}

var WLANOperationMode_value = map[string]int32{
	"WLAN_OPMODE_MANAGED": 0,
	"WLAN_OPMODE_ADHOC":   1,
}

func (x WLANOperationMode) String() string {
	return proto.EnumName(WLANOperationMode_name, int32(x))
}

func (WLANOperationMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{1}
}

type WLANAuthType int32

const (
	WLANAuthType_WLAN_AUTH_OPEN     WLANAuthType = 0
	WLANAuthType_WLAN_AUTH_SHARED   WLANAuthType = 1
	WLANAuthType_WLAN_AUTH_WPA_PSK  WLANAuthType = 2
	WLANAuthType_WLAN_AUTH_WPA2_PSK WLANAuthType = 3
)

var WLANAuthType_name = map[int32]string{
	0: "WLAN_AUTH_OPEN",
	1: "WLAN_AUTH_SHARED",
	2: "WLAN_AUTH_WPA_PSK",
	3: "WLAN_AUTH_WPA2_PSK",
}

var WLANAuthType_value = map[string]int32{
	"WLAN_AUTH_OPEN":     0,
	"WLAN_AUTH_SHARED":   1,
	"WLAN_AUTH_WPA_PSK":  2,
	"WLAN_AUTH_WPA2_PSK": 3,
}

func (x WLANAuthType) String() string {
	return proto.EnumName(WLANAuthType_name, int32(x))
}

func (WLANAuthType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2}
}

type WLANEncryptionType int32

const (
	WLANEncryptionType_WLAN_ENC_NONE         WLANEncryptionType = 0
	WLANEncryptionType_BS2_WLAN_ENC_WEP      WLANEncryptionType = 1
	WLANEncryptionType_BS2_WLAN_ENC_TKIP_AES WLANEncryptionType = 2
	WLANEncryptionType_BS2_WLAN_ENC_AES      WLANEncryptionType = 3
	WLANEncryptionType_BS2_WLAN_ENC_TKIP     WLANEncryptionType = 4
)

var WLANEncryptionType_name = map[int32]string{
	0: "WLAN_ENC_NONE",
	1: "BS2_WLAN_ENC_WEP",
	2: "BS2_WLAN_ENC_TKIP_AES",
	3: "BS2_WLAN_ENC_AES",
	4: "BS2_WLAN_ENC_TKIP",
}

var WLANEncryptionType_value = map[string]int32{
	"WLAN_ENC_NONE":         0,
	"BS2_WLAN_ENC_WEP":      1,
	"BS2_WLAN_ENC_TKIP_AES": 2,
	"BS2_WLAN_ENC_AES":      3,
	"BS2_WLAN_ENC_TKIP":     4,
}

func (x WLANEncryptionType) String() string {
	return proto.EnumName(WLANEncryptionType_name, int32(x))
}

func (WLANEncryptionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{3}
}

type GetIPConfigRequest struct {
	DeviceID             uint32   `protobuf:"varint,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIPConfigRequest) Reset()         { *m = GetIPConfigRequest{} }
func (m *GetIPConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetIPConfigRequest) ProtoMessage()    {}
func (*GetIPConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0}
}

func (m *GetIPConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIPConfigRequest.Unmarshal(m, b)
}
func (m *GetIPConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIPConfigRequest.Marshal(b, m, deterministic)
}
func (m *GetIPConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIPConfigRequest.Merge(m, src)
}
func (m *GetIPConfigRequest) XXX_Size() int {
	return xxx_messageInfo_GetIPConfigRequest.Size(m)
}
func (m *GetIPConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIPConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIPConfigRequest proto.InternalMessageInfo

func (m *GetIPConfigRequest) GetDeviceID() uint32 {
	if m != nil {
		return m.DeviceID
	}
	return 0
}

type GetIPConfigResponse struct {
	Config               *IPConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetIPConfigResponse) Reset()         { *m = GetIPConfigResponse{} }
func (m *GetIPConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetIPConfigResponse) ProtoMessage()    {}
func (*GetIPConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{1}
}

func (m *GetIPConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIPConfigResponse.Unmarshal(m, b)
}
func (m *GetIPConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIPConfigResponse.Marshal(b, m, deterministic)
}
func (m *GetIPConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIPConfigResponse.Merge(m, src)
}
func (m *GetIPConfigResponse) XXX_Size() int {
	return xxx_messageInfo_GetIPConfigResponse.Size(m)
}
func (m *GetIPConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIPConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIPConfigResponse proto.InternalMessageInfo

func (m *GetIPConfigResponse) GetConfig() *IPConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type SetIPConfigRequest struct {
	DeviceID             uint32    `protobuf:"varint,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	Config               *IPConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SetIPConfigRequest) Reset()         { *m = SetIPConfigRequest{} }
func (m *SetIPConfigRequest) String() string { return proto.CompactTextString(m) }
func (*SetIPConfigRequest) ProtoMessage()    {}
func (*SetIPConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2}
}

func (m *SetIPConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetIPConfigRequest.Unmarshal(m, b)
}
func (m *SetIPConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetIPConfigRequest.Marshal(b, m, deterministic)
}
func (m *SetIPConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetIPConfigRequest.Merge(m, src)
}
func (m *SetIPConfigRequest) XXX_Size() int {
	return xxx_messageInfo_SetIPConfigRequest.Size(m)
}
func (m *SetIPConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetIPConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetIPConfigRequest proto.InternalMessageInfo

func (m *SetIPConfigRequest) GetDeviceID() uint32 {
	if m != nil {
		return m.DeviceID
	}
	return 0
}

func (m *SetIPConfigRequest) GetConfig() *IPConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type SetIPConfigResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetIPConfigResponse) Reset()         { *m = SetIPConfigResponse{} }
func (m *SetIPConfigResponse) String() string { return proto.CompactTextString(m) }
func (*SetIPConfigResponse) ProtoMessage()    {}
func (*SetIPConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{3}
}

func (m *SetIPConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetIPConfigResponse.Unmarshal(m, b)
}
func (m *SetIPConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetIPConfigResponse.Marshal(b, m, deterministic)
}
func (m *SetIPConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetIPConfigResponse.Merge(m, src)
}
func (m *SetIPConfigResponse) XXX_Size() int {
	return xxx_messageInfo_SetIPConfigResponse.Size(m)
}
func (m *SetIPConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetIPConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetIPConfigResponse proto.InternalMessageInfo

type SetIPConfigMultiRequest struct {
	DeviceIDs            []uint32  `protobuf:"varint,1,rep,packed,name=deviceIDs,proto3" json:"deviceIDs,omitempty"`
	Config               *IPConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SetIPConfigMultiRequest) Reset()         { *m = SetIPConfigMultiRequest{} }
func (m *SetIPConfigMultiRequest) String() string { return proto.CompactTextString(m) }
func (*SetIPConfigMultiRequest) ProtoMessage()    {}
func (*SetIPConfigMultiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{4}
}

func (m *SetIPConfigMultiRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetIPConfigMultiRequest.Unmarshal(m, b)
}
func (m *SetIPConfigMultiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetIPConfigMultiRequest.Marshal(b, m, deterministic)
}
func (m *SetIPConfigMultiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetIPConfigMultiRequest.Merge(m, src)
}
func (m *SetIPConfigMultiRequest) XXX_Size() int {
	return xxx_messageInfo_SetIPConfigMultiRequest.Size(m)
}
func (m *SetIPConfigMultiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetIPConfigMultiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetIPConfigMultiRequest proto.InternalMessageInfo

func (m *SetIPConfigMultiRequest) GetDeviceIDs() []uint32 {
	if m != nil {
		return m.DeviceIDs
	}
	return nil
}

func (m *SetIPConfigMultiRequest) GetConfig() *IPConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type SetIPConfigMultiResponse struct {
	DeviceErrors         []*err.ErrorResponse `protobuf:"bytes,1,rep,name=deviceErrors,proto3" json:"deviceErrors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SetIPConfigMultiResponse) Reset()         { *m = SetIPConfigMultiResponse{} }
func (m *SetIPConfigMultiResponse) String() string { return proto.CompactTextString(m) }
func (*SetIPConfigMultiResponse) ProtoMessage()    {}
func (*SetIPConfigMultiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{5}
}

func (m *SetIPConfigMultiResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetIPConfigMultiResponse.Unmarshal(m, b)
}
func (m *SetIPConfigMultiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetIPConfigMultiResponse.Marshal(b, m, deterministic)
}
func (m *SetIPConfigMultiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetIPConfigMultiResponse.Merge(m, src)
}
func (m *SetIPConfigMultiResponse) XXX_Size() int {
	return xxx_messageInfo_SetIPConfigMultiResponse.Size(m)
}
func (m *SetIPConfigMultiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetIPConfigMultiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetIPConfigMultiResponse proto.InternalMessageInfo

func (m *SetIPConfigMultiResponse) GetDeviceErrors() []*err.ErrorResponse {
	if m != nil {
		return m.DeviceErrors
	}
	return nil
}

type IPConfig struct {
	UseDHCP              bool                   `protobuf:"varint,1,opt,name=useDHCP,proto3" json:"useDHCP,omitempty"`
	IPAddr               string                 `protobuf:"bytes,2,opt,name=IPAddr,proto3" json:"IPAddr,omitempty"`
	Gateway              string                 `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	SubnetMask           string                 `protobuf:"bytes,4,opt,name=subnetMask,proto3" json:"subnetMask,omitempty"`
	Port                 int32                  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	ConnectionMode       connect.ConnectionMode `protobuf:"varint,6,opt,name=connectionMode,proto3,enum=connect.ConnectionMode" json:"connectionMode,omitempty"`
	ServerAddr           string                 `protobuf:"bytes,7,opt,name=serverAddr,proto3" json:"serverAddr,omitempty"`
	ServerPort           int32                  `protobuf:"varint,8,opt,name=serverPort,proto3" json:"serverPort,omitempty"`
	SSLServerPort        int32                  `protobuf:"varint,9,opt,name=SSLServerPort,proto3" json:"SSLServerPort,omitempty"`
	UseDNS               bool                   `protobuf:"varint,10,opt,name=useDNS,proto3" json:"useDNS,omitempty"`
	DNSServer            string                 `protobuf:"bytes,11,opt,name=DNSServer,proto3" json:"DNSServer,omitempty"`
	ServerURL            string                 `protobuf:"bytes,12,opt,name=serverURL,proto3" json:"serverURL,omitempty"`
	MTUSize              int32                  `protobuf:"varint,13,opt,name=MTUSize,proto3" json:"MTUSize,omitempty"`
	Baseband             EthernetBaseband       `protobuf:"varint,14,opt,name=baseband,proto3,enum=network.EthernetBaseband" json:"baseband,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *IPConfig) Reset()         { *m = IPConfig{} }
func (m *IPConfig) String() string { return proto.CompactTextString(m) }
func (*IPConfig) ProtoMessage()    {}
func (*IPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{6}
}

func (m *IPConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPConfig.Unmarshal(m, b)
}
func (m *IPConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPConfig.Marshal(b, m, deterministic)
}
func (m *IPConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPConfig.Merge(m, src)
}
func (m *IPConfig) XXX_Size() int {
	return xxx_messageInfo_IPConfig.Size(m)
}
func (m *IPConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IPConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IPConfig proto.InternalMessageInfo

func (m *IPConfig) GetUseDHCP() bool {
	if m != nil {
		return m.UseDHCP
	}
	return false
}

func (m *IPConfig) GetIPAddr() string {
	if m != nil {
		return m.IPAddr
	}
	return ""
}

func (m *IPConfig) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *IPConfig) GetSubnetMask() string {
	if m != nil {
		return m.SubnetMask
	}
	return ""
}

func (m *IPConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *IPConfig) GetConnectionMode() connect.ConnectionMode {
	if m != nil {
		return m.ConnectionMode
	}
	return connect.ConnectionMode_SERVER_TO_DEVICE
}

func (m *IPConfig) GetServerAddr() string {
	if m != nil {
		return m.ServerAddr
	}
	return ""
}

func (m *IPConfig) GetServerPort() int32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *IPConfig) GetSSLServerPort() int32 {
	if m != nil {
		return m.SSLServerPort
	}
	return 0
}

func (m *IPConfig) GetUseDNS() bool {
	if m != nil {
		return m.UseDNS
	}
	return false
}

func (m *IPConfig) GetDNSServer() string {
	if m != nil {
		return m.DNSServer
	}
	return ""
}

func (m *IPConfig) GetServerURL() string {
	if m != nil {
		return m.ServerURL
	}
	return ""
}

func (m *IPConfig) GetMTUSize() int32 {
	if m != nil {
		return m.MTUSize
	}
	return 0
}

func (m *IPConfig) GetBaseband() EthernetBaseband {
	if m != nil {
		return m.Baseband
	}
	return EthernetBaseband_BASEBAND_10BASE_T
}

type GetWLANConfigRequest struct {
	DeviceID             uint32   `protobuf:"varint,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWLANConfigRequest) Reset()         { *m = GetWLANConfigRequest{} }
func (m *GetWLANConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetWLANConfigRequest) ProtoMessage()    {}
func (*GetWLANConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{7}
}

func (m *GetWLANConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWLANConfigRequest.Unmarshal(m, b)
}
func (m *GetWLANConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWLANConfigRequest.Marshal(b, m, deterministic)
}
func (m *GetWLANConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWLANConfigRequest.Merge(m, src)
}
func (m *GetWLANConfigRequest) XXX_Size() int {
	return xxx_messageInfo_GetWLANConfigRequest.Size(m)
}
func (m *GetWLANConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWLANConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWLANConfigRequest proto.InternalMessageInfo

func (m *GetWLANConfigRequest) GetDeviceID() uint32 {
	if m != nil {
		return m.DeviceID
	}
	return 0
}

type GetWLANConfigResponse struct {
	Config               *WLANConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetWLANConfigResponse) Reset()         { *m = GetWLANConfigResponse{} }
func (m *GetWLANConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetWLANConfigResponse) ProtoMessage()    {}
func (*GetWLANConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{8}
}

func (m *GetWLANConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWLANConfigResponse.Unmarshal(m, b)
}
func (m *GetWLANConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWLANConfigResponse.Marshal(b, m, deterministic)
}
func (m *GetWLANConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWLANConfigResponse.Merge(m, src)
}
func (m *GetWLANConfigResponse) XXX_Size() int {
	return xxx_messageInfo_GetWLANConfigResponse.Size(m)
}
func (m *GetWLANConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWLANConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWLANConfigResponse proto.InternalMessageInfo

func (m *GetWLANConfigResponse) GetConfig() *WLANConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type SetWLANConfigRequest struct {
	DeviceID             uint32      `protobuf:"varint,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	Config               *WLANConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SetWLANConfigRequest) Reset()         { *m = SetWLANConfigRequest{} }
func (m *SetWLANConfigRequest) String() string { return proto.CompactTextString(m) }
func (*SetWLANConfigRequest) ProtoMessage()    {}
func (*SetWLANConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{9}
}

func (m *SetWLANConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetWLANConfigRequest.Unmarshal(m, b)
}
func (m *SetWLANConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetWLANConfigRequest.Marshal(b, m, deterministic)
}
func (m *SetWLANConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetWLANConfigRequest.Merge(m, src)
}
func (m *SetWLANConfigRequest) XXX_Size() int {
	return xxx_messageInfo_SetWLANConfigRequest.Size(m)
}
func (m *SetWLANConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetWLANConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetWLANConfigRequest proto.InternalMessageInfo

func (m *SetWLANConfigRequest) GetDeviceID() uint32 {
	if m != nil {
		return m.DeviceID
	}
	return 0
}

func (m *SetWLANConfigRequest) GetConfig() *WLANConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type SetWLANConfigResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetWLANConfigResponse) Reset()         { *m = SetWLANConfigResponse{} }
func (m *SetWLANConfigResponse) String() string { return proto.CompactTextString(m) }
func (*SetWLANConfigResponse) ProtoMessage()    {}
func (*SetWLANConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{10}
}

func (m *SetWLANConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetWLANConfigResponse.Unmarshal(m, b)
}
func (m *SetWLANConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetWLANConfigResponse.Marshal(b, m, deterministic)
}
func (m *SetWLANConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetWLANConfigResponse.Merge(m, src)
}
func (m *SetWLANConfigResponse) XXX_Size() int {
	return xxx_messageInfo_SetWLANConfigResponse.Size(m)
}
func (m *SetWLANConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetWLANConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetWLANConfigResponse proto.InternalMessageInfo

type SetWLANConfigMultiRequest struct {
	DeviceIDs            []uint32    `protobuf:"varint,1,rep,packed,name=deviceIDs,proto3" json:"deviceIDs,omitempty"`
	Config               *WLANConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SetWLANConfigMultiRequest) Reset()         { *m = SetWLANConfigMultiRequest{} }
func (m *SetWLANConfigMultiRequest) String() string { return proto.CompactTextString(m) }
func (*SetWLANConfigMultiRequest) ProtoMessage()    {}
func (*SetWLANConfigMultiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{11}
}

func (m *SetWLANConfigMultiRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetWLANConfigMultiRequest.Unmarshal(m, b)
}
func (m *SetWLANConfigMultiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetWLANConfigMultiRequest.Marshal(b, m, deterministic)
}
func (m *SetWLANConfigMultiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetWLANConfigMultiRequest.Merge(m, src)
}
func (m *SetWLANConfigMultiRequest) XXX_Size() int {
	return xxx_messageInfo_SetWLANConfigMultiRequest.Size(m)
}
func (m *SetWLANConfigMultiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetWLANConfigMultiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetWLANConfigMultiRequest proto.InternalMessageInfo

func (m *SetWLANConfigMultiRequest) GetDeviceIDs() []uint32 {
	if m != nil {
		return m.DeviceIDs
	}
	return nil
}

func (m *SetWLANConfigMultiRequest) GetConfig() *WLANConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type SetWLANConfigMultiResponse struct {
	DeviceErrors         []*err.ErrorResponse `protobuf:"bytes,1,rep,name=deviceErrors,proto3" json:"deviceErrors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SetWLANConfigMultiResponse) Reset()         { *m = SetWLANConfigMultiResponse{} }
func (m *SetWLANConfigMultiResponse) String() string { return proto.CompactTextString(m) }
func (*SetWLANConfigMultiResponse) ProtoMessage()    {}
func (*SetWLANConfigMultiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{12}
}

func (m *SetWLANConfigMultiResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetWLANConfigMultiResponse.Unmarshal(m, b)
}
func (m *SetWLANConfigMultiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetWLANConfigMultiResponse.Marshal(b, m, deterministic)
}
func (m *SetWLANConfigMultiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetWLANConfigMultiResponse.Merge(m, src)
}
func (m *SetWLANConfigMultiResponse) XXX_Size() int {
	return xxx_messageInfo_SetWLANConfigMultiResponse.Size(m)
}
func (m *SetWLANConfigMultiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetWLANConfigMultiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetWLANConfigMultiResponse proto.InternalMessageInfo

func (m *SetWLANConfigMultiResponse) GetDeviceErrors() []*err.ErrorResponse {
	if m != nil {
		return m.DeviceErrors
	}
	return nil
}

type WLANConfig struct {
	Enabled              bool               `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	OpMode               WLANOperationMode  `protobuf:"varint,2,opt,name=opMode,proto3,enum=network.WLANOperationMode" json:"opMode,omitempty"`
	AuthType             WLANAuthType       `protobuf:"varint,3,opt,name=authType,proto3,enum=network.WLANAuthType" json:"authType,omitempty"`
	EncType              WLANEncryptionType `protobuf:"varint,4,opt,name=encType,proto3,enum=network.WLANEncryptionType" json:"encType,omitempty"`
	ESSID                string             `protobuf:"bytes,5,opt,name=ESSID,proto3" json:"ESSID,omitempty"`
	AuthKey              string             `protobuf:"bytes,6,opt,name=authKey,proto3" json:"authKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WLANConfig) Reset()         { *m = WLANConfig{} }
func (m *WLANConfig) String() string { return proto.CompactTextString(m) }
func (*WLANConfig) ProtoMessage()    {}
func (*WLANConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{13}
}

func (m *WLANConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WLANConfig.Unmarshal(m, b)
}
func (m *WLANConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WLANConfig.Marshal(b, m, deterministic)
}
func (m *WLANConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WLANConfig.Merge(m, src)
}
func (m *WLANConfig) XXX_Size() int {
	return xxx_messageInfo_WLANConfig.Size(m)
}
func (m *WLANConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WLANConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WLANConfig proto.InternalMessageInfo

func (m *WLANConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *WLANConfig) GetOpMode() WLANOperationMode {
	if m != nil {
		return m.OpMode
	}
	return WLANOperationMode_WLAN_OPMODE_MANAGED
}

func (m *WLANConfig) GetAuthType() WLANAuthType {
	if m != nil {
		return m.AuthType
	}
	return WLANAuthType_WLAN_AUTH_OPEN
}

func (m *WLANConfig) GetEncType() WLANEncryptionType {
	if m != nil {
		return m.EncType
	}
	return WLANEncryptionType_WLAN_ENC_NONE
}

func (m *WLANConfig) GetESSID() string {
	if m != nil {
		return m.ESSID
	}
	return ""
}

func (m *WLANConfig) GetAuthKey() string {
	if m != nil {
		return m.AuthKey
	}
	return ""
}

func init() {
	proto.RegisterEnum("network.EthernetBaseband", EthernetBaseband_name, EthernetBaseband_value)
	proto.RegisterEnum("network.WLANOperationMode", WLANOperationMode_name, WLANOperationMode_value)
	proto.RegisterEnum("network.WLANAuthType", WLANAuthType_name, WLANAuthType_value)
	proto.RegisterEnum("network.WLANEncryptionType", WLANEncryptionType_name, WLANEncryptionType_value)
	proto.RegisterType((*GetIPConfigRequest)(nil), "network.GetIPConfigRequest")
	proto.RegisterType((*GetIPConfigResponse)(nil), "network.GetIPConfigResponse")
	proto.RegisterType((*SetIPConfigRequest)(nil), "network.SetIPConfigRequest")
	proto.RegisterType((*SetIPConfigResponse)(nil), "network.SetIPConfigResponse")
	proto.RegisterType((*SetIPConfigMultiRequest)(nil), "network.SetIPConfigMultiRequest")
	proto.RegisterType((*SetIPConfigMultiResponse)(nil), "network.SetIPConfigMultiResponse")
	proto.RegisterType((*IPConfig)(nil), "network.IPConfig")
	proto.RegisterType((*GetWLANConfigRequest)(nil), "network.GetWLANConfigRequest")
	proto.RegisterType((*GetWLANConfigResponse)(nil), "network.GetWLANConfigResponse")
	proto.RegisterType((*SetWLANConfigRequest)(nil), "network.SetWLANConfigRequest")
	proto.RegisterType((*SetWLANConfigResponse)(nil), "network.SetWLANConfigResponse")
	proto.RegisterType((*SetWLANConfigMultiRequest)(nil), "network.SetWLANConfigMultiRequest")
	proto.RegisterType((*SetWLANConfigMultiResponse)(nil), "network.SetWLANConfigMultiResponse")
	proto.RegisterType((*WLANConfig)(nil), "network.WLANConfig")
}

func init() { proto.RegisterFile("network.proto", fileDescriptor_8571034d60397816) }

var fileDescriptor_8571034d60397816 = []byte{
	// 926 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdf, 0x6f, 0xe2, 0x46,
	0x10, 0x8e, 0x21, 0x21, 0x30, 0x04, 0xe4, 0x4c, 0xc2, 0xe1, 0xd0, 0xeb, 0x89, 0xd2, 0x3e, 0xa4,
	0xa9, 0xc4, 0xdd, 0xb9, 0xba, 0xf6, 0xb1, 0x35, 0xd8, 0x0a, 0x28, 0xc1, 0x58, 0x5e, 0xa2, 0x48,
	0xad, 0x2a, 0xcb, 0x98, 0xbd, 0x1c, 0xca, 0x9d, 0x4d, 0x6d, 0x73, 0xa7, 0xf4, 0xbd, 0xff, 0x62,
	0xff, 0x92, 0xf6, 0xbd, 0xda, 0xf5, 0x0f, 0x6c, 0xe0, 0x92, 0xa2, 0xbe, 0x31, 0xdf, 0x7c, 0x33,
	0xdf, 0x78, 0x76, 0x66, 0x17, 0xa8, 0xb9, 0x34, 0xfc, 0xe4, 0xf9, 0xf7, 0xdd, 0x85, 0xef, 0x85,
	0x1e, 0x1e, 0xc6, 0x66, 0xab, 0x42, 0x7d, 0x3f, 0xc2, 0x5a, 0x35, 0xc7, 0x73, 0x5d, 0xea, 0x84,
	0x91, 0xd9, 0x79, 0x05, 0x78, 0x49, 0xc3, 0xa1, 0xd1, 0xf7, 0xdc, 0xb7, 0xf3, 0x3b, 0x93, 0xfe,
	0xbe, 0xa4, 0x41, 0x88, 0x2d, 0x28, 0xcf, 0xe8, 0xc7, 0xb9, 0x43, 0x87, 0xaa, 0x24, 0xb4, 0x85,
	0xf3, 0x9a, 0x99, 0xda, 0x9d, 0x9f, 0xe1, 0x24, 0x17, 0x11, 0x2c, 0x3c, 0x37, 0xa0, 0xf8, 0x2d,
	0x94, 0x1c, 0x8e, 0xf0, 0x80, 0xaa, 0x7c, 0xdc, 0x4d, 0x6a, 0x49, 0xa9, 0x31, 0xa1, 0xf3, 0x2b,
	0x20, 0xd9, 0x49, 0x33, 0x93, 0xbc, 0xf0, 0x54, 0xf2, 0x06, 0x9c, 0x90, 0xcd, 0xf2, 0x3a, 0x53,
	0x68, 0x66, 0xe0, 0xd1, 0xf2, 0x7d, 0x38, 0x4f, 0x84, 0x9f, 0x43, 0x25, 0x11, 0x0a, 0x24, 0xa1,
	0x5d, 0x3c, 0xaf, 0x99, 0x2b, 0x60, 0x17, 0x69, 0x13, 0xa4, 0x4d, 0x8d, 0xb8, 0x3d, 0x3f, 0xc0,
	0x51, 0x94, 0x53, 0xf3, 0x7d, 0xcf, 0x8f, 0x74, 0xaa, 0x32, 0x76, 0xd9, 0xc1, 0x70, 0x28, 0x61,
	0x9a, 0x39, 0x5e, 0xe7, 0xaf, 0x22, 0x94, 0x93, 0x8c, 0x28, 0xc1, 0xe1, 0x32, 0xa0, 0xea, 0xa0,
	0x6f, 0xf0, 0x0e, 0x95, 0xcd, 0xc4, 0xc4, 0x67, 0x50, 0x1a, 0x1a, 0xca, 0x6c, 0xe6, 0xf3, 0x2a,
	0x2b, 0x66, 0x6c, 0xb1, 0x88, 0x3b, 0x3b, 0xa4, 0x9f, 0xec, 0x07, 0xa9, 0xc8, 0x1d, 0x89, 0x89,
	0x2f, 0x00, 0x82, 0xe5, 0xd4, 0xa5, 0xe1, 0xc8, 0x0e, 0xee, 0xa5, 0x7d, 0xee, 0xcc, 0x20, 0x88,
	0xb0, 0xbf, 0xf0, 0xfc, 0x50, 0x3a, 0x68, 0x0b, 0xe7, 0x07, 0x26, 0xff, 0x8d, 0x3f, 0x41, 0x3d,
	0x9e, 0x9e, 0xb9, 0xe7, 0x8e, 0xbc, 0x19, 0x95, 0x4a, 0x6d, 0xe1, 0xbc, 0x2e, 0x37, 0xbb, 0xc9,
	0x50, 0xf5, 0x73, 0x6e, 0x73, 0x8d, 0xce, 0x45, 0xa9, 0xff, 0x91, 0xfa, 0xbc, 0xd4, 0xc3, 0x58,
	0x34, 0x45, 0x56, 0x7e, 0x83, 0x49, 0x97, 0xb9, 0x74, 0x06, 0xc1, 0x6f, 0xa0, 0x46, 0xc8, 0x35,
	0x59, 0x51, 0x2a, 0x9c, 0x92, 0x07, 0x59, 0x33, 0x58, 0x5f, 0x74, 0x22, 0x01, 0xef, 0x52, 0x6c,
	0xb1, 0x83, 0x56, 0x75, 0x12, 0x11, 0xa5, 0x2a, 0x17, 0x5f, 0x01, 0xcc, 0x1b, 0x29, 0xdd, 0x98,
	0xd7, 0xd2, 0x51, 0xe4, 0x4d, 0x01, 0xd6, 0xc8, 0xd1, 0xe4, 0x86, 0xcc, 0xff, 0xa0, 0x52, 0x8d,
	0x6b, 0x26, 0x26, 0xbe, 0x81, 0xf2, 0xd4, 0x0e, 0xe8, 0xd4, 0x76, 0x67, 0x52, 0x9d, 0xb7, 0xe3,
	0x2c, 0x1d, 0x11, 0x2d, 0x7c, 0x47, 0x7d, 0x97, 0x86, 0xbd, 0x98, 0x60, 0xa6, 0xd4, 0x8e, 0x0c,
	0xa7, 0x97, 0x34, 0xbc, 0xbd, 0x56, 0xf4, 0xff, 0xbe, 0x7a, 0x2a, 0x34, 0xd6, 0x62, 0xe2, 0xe9,
	0xfa, 0x6e, 0x6d, 0xf9, 0x4e, 0xd2, 0x0a, 0x32, 0xe4, 0x64, 0x4c, 0x2d, 0x38, 0x25, 0x3b, 0x2a,
	0x67, 0x04, 0x0a, 0x4f, 0x0b, 0x34, 0xa1, 0x41, 0xb6, 0x95, 0xd9, 0x79, 0x0b, 0x67, 0x39, 0xc7,
	0x0e, 0x6b, 0xb8, 0x53, 0x01, 0x13, 0x68, 0x6d, 0xd3, 0xf9, 0x9f, 0xab, 0xf8, 0xb7, 0x00, 0xb0,
	0xca, 0xc9, 0x26, 0x82, 0xba, 0xf6, 0xf4, 0x3d, 0x9d, 0x25, 0xcb, 0x18, 0x9b, 0x28, 0x43, 0xc9,
	0x5b, 0xf0, 0xf5, 0x28, 0xf0, 0x79, 0x68, 0xe5, 0x6a, 0x1d, 0x2f, 0xa8, 0x6f, 0xa7, 0x1b, 0x12,
	0x33, 0xf1, 0x35, 0x94, 0xed, 0x65, 0xf8, 0x6e, 0xf2, 0xb0, 0xa0, 0x7c, 0x53, 0xeb, 0x72, 0x23,
	0x17, 0xa5, 0xc4, 0x4e, 0x33, 0xa5, 0xe1, 0x1b, 0x56, 0x80, 0xc3, 0x23, 0xf6, 0x79, 0xc4, 0x17,
	0xb9, 0x08, 0xcd, 0x75, 0xfc, 0x87, 0x05, 0x13, 0xe2, 0x71, 0x09, 0x17, 0x4f, 0xe1, 0x40, 0x23,
	0x64, 0xa8, 0xf2, 0xcd, 0xae, 0x98, 0x91, 0xc1, 0xbe, 0x86, 0x25, 0xbe, 0xa2, 0x0f, 0x7c, 0xa7,
	0x2b, 0x66, 0x62, 0x5e, 0x28, 0x20, 0xae, 0x8f, 0x31, 0x36, 0xe0, 0xb8, 0xa7, 0x10, 0xad, 0xa7,
	0xe8, 0xaa, 0xf5, 0xfa, 0x15, 0xfb, 0x69, 0x4d, 0xc4, 0x3d, 0x7c, 0x06, 0x98, 0x81, 0x13, 0x5c,
	0xb8, 0xe8, 0xc3, 0xf1, 0xc6, 0x97, 0x63, 0x13, 0x4e, 0x18, 0x68, 0x8d, 0x8d, 0xd1, 0x58, 0xd5,
	0xac, 0x91, 0xa2, 0x2b, 0x97, 0x9a, 0x2a, 0xee, 0xb1, 0xe4, 0x59, 0x87, 0xa2, 0x0e, 0xc6, 0x7d,
	0x51, 0xb8, 0xb8, 0x83, 0xa3, 0x6c, 0x23, 0x10, 0xa1, 0xce, 0x69, 0xca, 0xcd, 0x64, 0x60, 0x8d,
	0x0d, 0x4d, 0x17, 0xf7, 0xf0, 0x14, 0xc4, 0x15, 0x46, 0x06, 0x8a, 0xa9, 0xa9, 0xa2, 0x90, 0x26,
	0xe4, 0xe8, 0xad, 0xa1, 0x58, 0x06, 0xb9, 0x12, 0x0b, 0xac, 0xda, 0x1c, 0x2c, 0x73, 0xbc, 0x78,
	0xf1, 0xa7, 0x10, 0x39, 0xf2, 0x0d, 0xc4, 0x63, 0xa8, 0x71, 0xba, 0xa6, 0xf7, 0x2d, 0x7d, 0xac,
	0x6b, 0x91, 0x5c, 0x8f, 0xc8, 0x56, 0x0a, 0xdf, 0x6a, 0x86, 0x28, 0xe0, 0x19, 0x34, 0x72, 0xe8,
	0xe4, 0x6a, 0x68, 0x58, 0x8a, 0x46, 0xc4, 0xc2, 0x46, 0x00, 0x43, 0x8b, 0xbc, 0x9b, 0xeb, 0x01,
	0xe2, 0xbe, 0xfc, 0x4f, 0x11, 0x0e, 0xf5, 0xe8, 0x40, 0x71, 0x00, 0xd5, 0xcc, 0xa3, 0x8b, 0xab,
	0x93, 0xde, 0x7c, 0xbc, 0x5b, 0xcf, 0xb7, 0x3b, 0xe3, 0xe9, 0x1f, 0x40, 0x95, 0x6c, 0xcd, 0x44,
	0x1e, 0xcb, 0xb4, 0xe5, 0x49, 0xc5, 0x5b, 0x10, 0xd7, 0x9f, 0x3b, 0x6c, 0x6f, 0x8b, 0xc8, 0xae,
	0x79, 0xeb, 0xab, 0x47, 0x18, 0x71, 0x62, 0x1d, 0x6a, 0xb9, 0x6b, 0x0e, 0xbf, 0xcc, 0x7e, 0xd1,
	0xc6, 0xc5, 0xd5, 0x7a, 0xf1, 0x39, 0xf7, 0x2a, 0x1f, 0xf9, 0x4c, 0x3e, 0xf2, 0x78, 0xbe, 0xad,
	0xd7, 0x18, 0xfe, 0xc6, 0xff, 0xbf, 0xac, 0x5d, 0x2f, 0xd8, 0xd9, 0x1e, 0x95, 0xfb, 0xf8, 0xaf,
	0x1f, 0xe5, 0x44, 0xe9, 0x7b, 0x3f, 0x42, 0xcb, 0xf1, 0x3e, 0x74, 0x83, 0xe5, 0xc2, 0xa7, 0x1f,
	0xec, 0xb9, 0xeb, 0x74, 0x83, 0xd9, 0x7d, 0x12, 0x68, 0x08, 0xbf, 0x34, 0xa7, 0x73, 0x2f, 0x08,
	0x6d, 0xff, 0x25, 0x7b, 0x9d, 0xe6, 0x0e, 0x7d, 0x19, 0xbb, 0xa6, 0x25, 0xfe, 0x97, 0xee, 0xfb,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x9e, 0x71, 0x9a, 0x06, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkClient interface {
	GetIPConfig(ctx context.Context, in *GetIPConfigRequest, opts ...grpc.CallOption) (*GetIPConfigResponse, error)
	SetIPConfig(ctx context.Context, in *SetIPConfigRequest, opts ...grpc.CallOption) (*SetIPConfigResponse, error)
	SetIPConfigMulti(ctx context.Context, in *SetIPConfigMultiRequest, opts ...grpc.CallOption) (*SetIPConfigMultiResponse, error)
	GetWLANConfig(ctx context.Context, in *GetWLANConfigRequest, opts ...grpc.CallOption) (*GetWLANConfigResponse, error)
	SetWLANConfig(ctx context.Context, in *SetWLANConfigRequest, opts ...grpc.CallOption) (*SetWLANConfigResponse, error)
	SetWLANConfigMulti(ctx context.Context, in *SetWLANConfigMultiRequest, opts ...grpc.CallOption) (*SetWLANConfigMultiResponse, error)
}

type networkClient struct {
	cc *grpc.ClientConn
}

func NewNetworkClient(cc *grpc.ClientConn) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) GetIPConfig(ctx context.Context, in *GetIPConfigRequest, opts ...grpc.CallOption) (*GetIPConfigResponse, error) {
	out := new(GetIPConfigResponse)
	err := c.cc.Invoke(ctx, "/network.Network/GetIPConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) SetIPConfig(ctx context.Context, in *SetIPConfigRequest, opts ...grpc.CallOption) (*SetIPConfigResponse, error) {
	out := new(SetIPConfigResponse)
	err := c.cc.Invoke(ctx, "/network.Network/SetIPConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) SetIPConfigMulti(ctx context.Context, in *SetIPConfigMultiRequest, opts ...grpc.CallOption) (*SetIPConfigMultiResponse, error) {
	out := new(SetIPConfigMultiResponse)
	err := c.cc.Invoke(ctx, "/network.Network/SetIPConfigMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetWLANConfig(ctx context.Context, in *GetWLANConfigRequest, opts ...grpc.CallOption) (*GetWLANConfigResponse, error) {
	out := new(GetWLANConfigResponse)
	err := c.cc.Invoke(ctx, "/network.Network/GetWLANConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) SetWLANConfig(ctx context.Context, in *SetWLANConfigRequest, opts ...grpc.CallOption) (*SetWLANConfigResponse, error) {
	out := new(SetWLANConfigResponse)
	err := c.cc.Invoke(ctx, "/network.Network/SetWLANConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) SetWLANConfigMulti(ctx context.Context, in *SetWLANConfigMultiRequest, opts ...grpc.CallOption) (*SetWLANConfigMultiResponse, error) {
	out := new(SetWLANConfigMultiResponse)
	err := c.cc.Invoke(ctx, "/network.Network/SetWLANConfigMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServer is the server API for Network service.
type NetworkServer interface {
	GetIPConfig(context.Context, *GetIPConfigRequest) (*GetIPConfigResponse, error)
	SetIPConfig(context.Context, *SetIPConfigRequest) (*SetIPConfigResponse, error)
	SetIPConfigMulti(context.Context, *SetIPConfigMultiRequest) (*SetIPConfigMultiResponse, error)
	GetWLANConfig(context.Context, *GetWLANConfigRequest) (*GetWLANConfigResponse, error)
	SetWLANConfig(context.Context, *SetWLANConfigRequest) (*SetWLANConfigResponse, error)
	SetWLANConfigMulti(context.Context, *SetWLANConfigMultiRequest) (*SetWLANConfigMultiResponse, error)
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

func _Network_GetIPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetIPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.Network/GetIPConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetIPConfig(ctx, req.(*GetIPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_SetIPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).SetIPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.Network/SetIPConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).SetIPConfig(ctx, req.(*SetIPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_SetIPConfigMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIPConfigMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).SetIPConfigMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.Network/SetIPConfigMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).SetIPConfigMulti(ctx, req.(*SetIPConfigMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetWLANConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWLANConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetWLANConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.Network/GetWLANConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetWLANConfig(ctx, req.(*GetWLANConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_SetWLANConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWLANConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).SetWLANConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.Network/SetWLANConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).SetWLANConfig(ctx, req.(*SetWLANConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_SetWLANConfigMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWLANConfigMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).SetWLANConfigMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.Network/SetWLANConfigMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).SetWLANConfigMulti(ctx, req.(*SetWLANConfigMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIPConfig",
			Handler:    _Network_GetIPConfig_Handler,
		},
		{
			MethodName: "SetIPConfig",
			Handler:    _Network_SetIPConfig_Handler,
		},
		{
			MethodName: "SetIPConfigMulti",
			Handler:    _Network_SetIPConfigMulti_Handler,
		},
		{
			MethodName: "GetWLANConfig",
			Handler:    _Network_GetWLANConfig_Handler,
		},
		{
			MethodName: "SetWLANConfig",
			Handler:    _Network_SetWLANConfig_Handler,
		},
		{
			MethodName: "SetWLANConfigMulti",
			Handler:    _Network_SetWLANConfigMulti_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}
