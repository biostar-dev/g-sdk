// Code generated by protoc-gen-go. DO NOT EDIT.
// source: error.proto

package error

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ErrorResponse struct {
	DeviceID             uint32   `protobuf:"varint,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorResponse) Reset()         { *m = ErrorResponse{} }
func (m *ErrorResponse) String() string { return proto.CompactTextString(m) }
func (*ErrorResponse) ProtoMessage()    {}
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0579b252106fcf4a, []int{0}
}

func (m *ErrorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorResponse.Unmarshal(m, b)
}
func (m *ErrorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorResponse.Marshal(b, m, deterministic)
}
func (m *ErrorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorResponse.Merge(m, src)
}
func (m *ErrorResponse) XXX_Size() int {
	return xxx_messageInfo_ErrorResponse.Size(m)
}
func (m *ErrorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorResponse proto.InternalMessageInfo

func (m *ErrorResponse) GetDeviceID() uint32 {
	if m != nil {
		return m.DeviceID
	}
	return 0
}

func (m *ErrorResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ErrorResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*ErrorResponse)(nil), "error.ErrorResponse")
}

func init() { proto.RegisterFile("error.proto", fileDescriptor_0579b252106fcf4a) }

var fileDescriptor_0579b252106fcf4a = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2d, 0x2a, 0xca,
	0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x02, 0xb9, 0x78, 0x5d,
	0x41, 0x8c, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x29, 0x2e, 0x8e, 0x94, 0xd4,
	0xb2, 0xcc, 0xe4, 0x54, 0x4f, 0x17, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xde, 0x20, 0x38, 0x5f, 0x48,
	0x88, 0x8b, 0x25, 0x39, 0x3f, 0x25, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0x35, 0x08, 0xcc, 0x16,
	0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x8d,
	0xd8, 0xb9, 0x58, 0xc1, 0x46, 0x3a, 0x19, 0x73, 0x49, 0x24, 0xe7, 0xe7, 0xea, 0x15, 0x97, 0x16,
	0x14, 0xa5, 0xe6, 0x26, 0x66, 0xe6, 0x25, 0xeb, 0x15, 0xa7, 0x64, 0xeb, 0x81, 0xed, 0x0d, 0x60,
	0x8c, 0x12, 0x4d, 0xca, 0xcc, 0x2f, 0x2e, 0x49, 0x2c, 0xd2, 0x2f, 0x4e, 0x2d, 0x02, 0x99, 0xaf,
	0x0f, 0x96, 0x48, 0x62, 0x03, 0x3b, 0xcf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x23, 0x2c,
	0x3d, 0xad, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ErrorClient is the client API for Error service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ErrorClient interface {
}

type errorClient struct {
	cc *grpc.ClientConn
}

func NewErrorClient(cc *grpc.ClientConn) ErrorClient {
	return &errorClient{cc}
}

// ErrorServer is the server API for Error service.
type ErrorServer interface {
}

func RegisterErrorServer(s *grpc.Server, srv ErrorServer) {
	s.RegisterService(&_Error_serviceDesc, srv)
}

var _Error_serviceDesc = grpc.ServiceDesc{
	ServiceName: "error.Error",
	HandlerType: (*ErrorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "error.proto",
}
